---
# This script contains commands to manage "SQL workflow":
# - Downloading database from remote host or use local dump
# - Importing to database
# - Running registry rebuild (when modules have been moved to new directory)
# - Running database updates
#
# Failed:
# [localhost] => {"cmd": "initctl version", "failed": true, "rc": 2}
# [Errno 2] No such file or directory
#
#- name: Start the MySQL service
#  service:
#    name: mysql
#    state: started
#    enabled: true

- name: Droping drupal database
  mysql_db: name={{ mysql_db }} state=absent login_host={{ mysql_host }} login_user={{ mysql_user }} login_password={{ mysql_pass }}
#  debug: var=mysql_host
  when: pp_environment == "demo" or pp_environment == "default"

- name: Creating drupal database
  mysql_db: name={{ mysql_db }} state=present login_host={{ mysql_host }} login_user={{ mysql_user }} login_password={{ mysql_pass }}

# Vagrant build.
- name: Downloading latest backup to local environment
  get_url: url={{ source_database }} dest={{ backup_folder }}/{{ source_backup_name }} force=yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

- name: Removing possible abandoned dump
  shell: rm -rf {{ backup_folder }}/stagebackup.sql
  sudo: yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

- name: Removing possible abandoned dump
  shell: gunzip {{ backup_folder }}/stagebackup.sql.gz
  sudo: yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

- name: Importing from remote backup
  mysql_db: name={{ mysql_db }} state=import target={{ backup_folder }}/stagebackup.sql login_host={{ mysql_host }} login_user={{ mysql_user }} login_password={{ mysql_pass }}
  sudo: yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

# CI server build.
- name: Copy latest backup to build folder
  sudo: yes
  shell: cp -f {{ backup_folder }}/latest_local_{{ local_backup_environment }}.sql.gz {{ pwd.stdout }}/latest.sql.gz
  when: (pp_environment == "default" or pp_environment == "demo") and ((ansible_env.USER is defined and ansible_env.USER == "{{ ci_server_username }}") or (ansible_env.SUDO_USER is defined and ansible_env.SUDO_USER == "{{ ci_server_username }}"))

- name: Importing from local backup
  mysql_db: name={{ mysql_db }} state=import target={{ pwd.stdout }}/latest.sql.gz login_host={{ mysql_host }} login_user={{ mysql_user }} login_password={{ mysql_pass }}
  sudo: yes
  when: (pp_environment == "default" or pp_environment == "demo") and ((ansible_env.USER is defined and ansible_env.USER == "{{ ci_server_username }}") or (ansible_env.SUDO_USER is defined and ansible_env.SUDO_USER == "{{ ci_server_username }}"))

- name: Remove local backup from build folder
  sudo: yes
  file: name={{ pwd.stdout }}/latest.sql.gz state=absent
  when: pp_environment == "default" or pp_environment == "demo"

# Run registry rebuild.
- name: Check if registry_rebuild is installed
  shell: "{{ php_env_vars }} drush --nocolor | grep -c registry_rebuild"
  when: rebuild_registry
  register: registry_rebuild_installed
  ignore_errors: true

- name: Downloading registry_rebuild
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y dl registry_rebuild"
  when: rebuild_registry and registry_rebuild_installed.stdout == "0"

- name: Clear drush --nocolor cache
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor cc drush"
  when: rebuild_registry and registry_rebuild_installed.stdout == "0"

- name: Rebuilding drupal registry
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y rr -l {{ site_url }} || true"
  when: rebuild_registry

- name: Drush clear command cache
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y cc drush --nocolor -l {{ site_url }} || true"

- name: Rebuilding cache
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y cr -l {{ site_url }} || true"

# Update database. See https://www.youtube.com/watch?v=vFsgNjhGr4Y how-to update configs with http://dgo.to/confi
- name: Updating database
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y updb -l {{ site_url }}"
  register: updates

- name: Drush cc drush
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor cc drush -l {{ site_url }}"

- name: Import configs
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y csim -l {{ site_url }}"

# Now use cim

#- name: Gets deleted config files form log
#  shell: "{{ php_env_vars }} cat config_stage_changes.log | grep -v 'staging/language/' | grep -E '^D' | awk '{print $2}' | rev | cut -d'/' -f1 | cut -d'.' -f2- | rev || true"
#  register: deploy_files_deleted
#
#- name: Remove single config from configuration manager.
#  shell: "{{ php_env_vars }} drush --nocolor -y ev \"Drupal::configFactory()->getEditable('{{ item }}')->delete();\" -l {{ site_url }}"
#  when: deploy_files_deleted.stdout != ''
#  with_items: deploy_files_deleted.stdout_lines
#
#- name: Gets added/modified config files form log
#  shell: "{{ php_env_vars }} cat config_stage_changes.log | grep -v 'staging/language/' | grep -E '^(A|M)' | grep staging | grep -E '/field\\.storage\\.' | awk '{print $2}' || true"
#  register: deploy_files_modified1
#
#- name: Apply changes from file
#  shell: "{{ php_env_vars }} {{ drupal_console_path }} -y config:import:single --name `basename {{ item }}` --file {{ item }} -l {{ site_url }}"
#  when: (deploy_files_modified1.stdout_lines | length) > 0
#  with_items: deploy_files_modified1.stdout_lines
#
#- name: Gets added/modified config files form log
#  shell: "{{ php_env_vars }} cat config_stage_changes.log | grep -v 'staging/language/' | grep -E '^(A|M)' | grep staging | grep -E '/field\\.field\\.' | awk '{print $2}' || true"
#  register: deploy_files_modified2
#
#- name: Apply changes from file
#  shell: "{{ php_env_vars }} {{ drupal_console_path }} -y config:import:single --name `basename {{ item }}` --file {{ item }} -l {{ site_url }}"
#  when: (deploy_files_modified2.stdout_lines | length) > 0
#  with_items: deploy_files_modified2.stdout_lines
#
#- name: Gets added/modified config files form log
#  shell: "{{ php_env_vars }} cat config_stage_changes.log | grep -v 'staging/language/' | grep -E '^(A|M)' | grep staging | grep -Ev '(/field\\.storage\\.|/field\\.field\\.)' | awk '{print $2}' || true"
#  register: deploy_files_modified3
#
#- name: Apply changes from file
#  shell: "{{ php_env_vars }} {{ drupal_console_path }} -y config:import:single --name `basename {{ item }}` --file {{ item }} -l {{ site_url }}"
#  when: (deploy_files_modified3.stdout_lines | length) > 0
#  with_items: deploy_files_modified3.stdout_lines

- name: Apply pending entity schema updates
  sudo: yes
  shell: "{{ php_env_vars }} drush --nocolor -y entup -l {{ site_url }}"

# Display updates output.
- name: Updates listing
  debug: var=updates.stdout_lines
