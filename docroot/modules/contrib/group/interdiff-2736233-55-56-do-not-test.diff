diff --git a/modules/ggroup/ggroup.views.inc b/modules/ggroup/ggroup.views.inc
new file mode 100644
index 0000000..e80227b
--- /dev/null
+++ b/modules/ggroup/ggroup.views.inc
@@ -0,0 +1,37 @@
+<?php
+
+/**
+ * Views alteration.
+ */
+
+/**
+ * Implements hook_views_data_alter().
+ */
+function ggroup_views_data_alter(array &$data) {
+  $entity_type_manager = \Drupal::entityTypeManager();
+  $entity_types = $entity_type_manager->getDefinitions();
+
+  /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+  $plugin_manager = \Drupal::service('plugin.manager.group_content_enabler');
+
+  // Add views data for all defined plugins so modules can provide default
+  // views even though their plugins may not have been installed yet.
+  foreach ($plugin_manager->getAll() as $plugin_id => $plugin) {
+    $entity_type_id = $plugin->getEntityTypeId();
+    $entity_type = $entity_types[$entity_type_id];
+    $entity_data_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
+
+    // We only add one 'group_content' entry per entity type.
+    if (isset($data[$entity_data_table]['group_content'])) {
+      continue;
+    }
+
+    $data[$entity_data_table]['group_id_depth'] = array(
+      'help' => t('Group id with depth implemented by subgroups'),
+      'argument' => array(
+        'title' => t('Has parent group ID (with depth)'),
+        'id' => 'group_id_depth',
+      ),
+    );
+  }
+}
diff --git a/modules/ggroup/src/Plugin/views/argument/GroupIdDepth.php b/modules/ggroup/src/Plugin/views/argument/GroupIdDepth.php
new file mode 100644
index 0000000..7bd6299
--- /dev/null
+++ b/modules/ggroup/src/Plugin/views/argument/GroupIdDepth.php
@@ -0,0 +1,114 @@
+<?php
+
+namespace Drupal\ggroup\Plugin\views\argument;
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
+use Drupal\views\Views;
+
+/**
+ * Argument handler for group content with depth.
+ *
+ * @ingroup views_argument_handlers
+ *
+ * @ViewsArgument("group_id_depth")
+ */
+class GroupIdDepth extends ArgumentPluginBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * @inheritdoc
+   */
+  protected function defineOptions() {
+    $options = parent::defineOptions();
+
+    $options['depth'] = array('default' => -1);
+
+    return $options;
+  }
+
+  /**
+   * @inheritdoc
+   */
+  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
+    $form['depth'] = array(
+      '#type' => 'checkboxes',
+      '#title' => $this->t('Depth'),
+      '#default_value' => $this->options['depth'],
+      '#options' => [
+        '-1' => $this->t('Content from parent group'),
+        '0' => $this->t('Subgroup 1 level'),
+        '1' => $this->t('Subgroup 2 level'),
+        '2' => $this->t('Subgroup 3 level'),
+      ],
+      '#description' => $this->t('The depth will match group content with hierarchy. So if you have country group "Germany" with project group "Germany project" as subgroup, and selected "Content from parent group" + "Subgroup 1 level" that will result to filter all group content from "Germany" and "Germany project" groups'),
+    );
+
+    parent::buildOptionsForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitOptionsForm(&$form, FormStateInterface $form_state) {
+    parent::submitOptionsForm($form, $form_state);
+
+    $depth_value = $form_state->getValue(['options', 'depth']);
+    $form_state->setValue(['options', 'depth'], array_filter($depth_value, function ($value) { return $value !== 0; }));
+  }
+
+  /**
+   * @inheritdoc
+   */
+  protected function defaultActions($which = NULL) {
+    if ($which) {
+      if (in_array($which, array('ignore', 'not found', 'empty', 'default'))) {
+        return parent::defaultActions($which);
+      }
+      return;
+    }
+    $actions = parent::defaultActions();
+    unset($actions['summary asc']);
+    unset($actions['summary desc']);
+    unset($actions['summary asc by count']);
+    unset($actions['summary desc by count']);
+    return $actions;
+  }
+
+  /**
+   * @inheritdoc
+   */
+  public function query($group_by = FALSE) {
+    $table = $this->view->storage->get('base_table');
+
+    $definition = array(
+      'table' => 'group_graph',
+      'field' => 'end_vertex',
+      'left_table' => $table,
+      'left_field' => 'gid',
+    );
+
+    $join = Views::pluginManager('join')->createInstance('standard', $definition);
+    $this->query->addRelationship('group_graph', $join, 'group_graph');
+
+    $group = $this->query->setWhereGroup('OR', 'group_id_depth');
+
+    foreach ($this->options['depth'] as $depth) {
+      if ($depth === '-1') {
+        $this->query->addWhereExpression($group, "$table.gid = :gid", [':gid' => $this->argument]);
+      }
+      else {
+        $this->query->addWhereExpression(
+          $group,
+          "group_graph.start_vertex = :gid AND group_graph.hops = :hops",
+          [
+            ':gid' => $this->argument,
+            ':hops' => $depth
+          ]
+        );
+      }
+
+    }
+  }
+
+}
