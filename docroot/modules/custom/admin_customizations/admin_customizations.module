<?php

/**
 * @file
 * Admin Customizations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_form_alter().
 */
function admin_customizations_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'file_image_edit_form':
    case 'file_document_edit_form':
      unset($form['uid'], $form['replace_upload']);
      break;

    case 'node_blog_form':
    case 'node_blog_edit_form':
      $form['field_author']['#access'] = FALSE;
      // $form['#validate'][] = 'admin_customization_blog_set_author';

      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admin_customizations_preprocess_page(array &$variables) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

  if ($is_admin) {
    $variables['#attached']['library'][] = 'ample/admin-page';
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function admin_customizations_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if (
    $entity->getEntityTypeId() === 'file' &&
    $entity->getMimeType() === 'image/svg+xml' &&
    isset($build['uri'])
  ) {
    $build['uri'][0]['#theme'] = 'image';
    unset($build['uri'][0]['#image_style']);
  }
}

/**
 * Submit handler.
 *
 * @see admin_customizations_form_alter()
 */
function admin_customizations_document_form_submit(array $form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  $node = $build_info['callback_object']->getEntity();
  $insert = $node->isNew();
  $link = Link::createFromRoute($node->label(), 'entity.node.edit_form', ['node' => $node->id()]);
  $t_args = [
    '@type' => node_get_type_label($node),
    '%title' => $link->toString(),
  ];

  drupal_get_messages();

  if ($insert) {
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }

  $form_state->setRedirectUrl(Url::fromRoute('system.admin_content'));
}

/**
 * Implements hook_toolbar_alter().
 */
function admin_customizations_toolbar_alter(&$items) {
  if (isset($items['masquerade_switch_back'])) {
    unset($items['masquerade_switch_back']);
  }

  if ($items['user']) {
    unset($items['user']['tray']['user_links']['#links']['account']);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function admin_customizations_field_widget_options_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (!empty($context['form']['#entity_type']) &&
      'paragraph' == $context['form']['#entity_type'] &&
      'field_infographic' == $context['form']['#parents'][0]) {
    if (isset($element['#options']['_none']) && '- Select a value -' == $element['#options']['_none']) {
      $element['#options']['_none'] = t('Select');
    }
  }
}

/**
 * Custom validate handler for blog create and update.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return bool
 */
function admin_customization_blog_set_author(&$form, FormStateInterface $form_state) {
  $uid_value = $form_state->getValue('uid');
  $uid = array_shift($uid_value);
  $author = Drupal::entityTypeManager()->getStorage('user')->load($uid['target_id']);
  $author_name[] = [
    'value' => $author->getDisplayName(),
  ];
  $form_state->setValue('field_authors', $author_name);
}
