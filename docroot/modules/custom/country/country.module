<?php

/**
 * @file
 * Contains country.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

define('NON_GROUP', 1);
define('PUBLIC_GROUP', 9999);

/**
 * Array of content type that can be public/global.
 *
 * @return array
 */
function _country_public_global_content_types() {
  return ['news', 'events'];
}

/**
 * Implements hook_node_access().
 */
function country_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ('view' === $op) {
    $result = gnode_node_access($node, $op, $account);

    if (in_array($node->getType(), _country_public_global_content_types())) {

      if (isset($node->global_content)) {
        $global_content = (int) $node->global_content->value;
        $global = AccessResult::allowedIf(1 == $global_content && $account->isAuthenticated());
      }

      if (isset($node->public_content)) {
        $public_content = (int) $node->public_content->value;
        $public = AccessResult::allowedIf(1 == $public_content);
      }

      if ($result->isNeutral()) {
        $result = AccessResult::forbidden();
      }
      if ($global->isAllowed() || $public->isAllowed()) {
        $result = AccessResult::allowed();
      }

    }

    // Check node group content permissions.
    // if ($account->hasPermission('always access to node view')) {
    //  if ($node instanceof GroupInterface) {
    //    $bypass = AccessResult::allowedIfHasPermissions($account, ['bypass group access']);
    //
    //    if (GroupAccessResult::allowedIfHasGroupPermission($node, $account, 'view group')
    //      ->isAllowed() || $bypass->isAllowed()
    //    ) {
    //      return AccessResult::allowed();
    //    }
    //    else {
    //      return AccessResult::forbidden();
    //    }
    //  }
    // }
    return $result;

  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function country_file_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (in_array($operation, ['download', 'view'])) {
    $file = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $entity->getFileUri()]);

    if (!empty($file)) {
      /* @var File $file */
      $file = reset($file);

      if ('document' === $file->bundle()) {
        $usages = \Drupal::service('file.usage')->listUsage($file);

        foreach ($usages as $module => $entity_types) {
          if ('file' === $module) {
            foreach ($entity_types as $entity_type => $value) {
              if ('paragraph' === $entity_type) {
                /* @var Paragraph $paragraph */
                $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load(key($value));
                /* @var Node $node */
                $node = $paragraph->getParentEntity();
                return country_node_access($node, 'view', $account);
              }
            }
          }
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access_records_alter().
 */
function country_node_access_records_alter(array &$grants, NodeInterface $node) {

  if (in_array($node->getType(), _country_public_global_content_types())) {

    $grants[] = [
      'realm' => 'content:nongroup',
      'gid' => NON_GROUP,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];

    if (isset($node->public_content)) {
      $public_content = $node->public_content->value;

      if (1 == $public_content) {
        $grants[] = [
          'realm' => 'public_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

    if (isset($node->global_content)) {
      $global_content = $node->global_content->value;

      if (1 == $global_content) {
        $grants[] = [
          'realm' => 'global_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function country_node_grants_alter(array &$grants, AccountInterface $account, $op) {
  if ($op == 'view') {
    $grants['public_group'] = [PUBLIC_GROUP];

    if ($account->isAuthenticated()) {
      $grants['content:nongroup'] = [NON_GROUP];
      $grants['global_group'] = [PUBLIC_GROUP];
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function country_module_implements_alter(array &$implementations, $hook) {
  if ('node_access' === $hook && isset($implementations['gnode'])) {
    $gnode = $implementations['gnode'];
    unset($implementations['gnode']);
    array_merge(['gnode' => $gnode], $implementations);
  }

  if ('form_alter' === $hook && isset($implementations['password_policy'])) {
    $password_policy = $implementations['password_policy'];
    unset($implementations['password_policy']);
    $implementations = array_merge(['password_policy' => $password_policy], $implementations);
  }
}
