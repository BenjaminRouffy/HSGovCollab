<?php

/**
 * @file
 * Contains country.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\group\Entity\GroupContentType;

define('NON_GROUP', 1);
define('PUBLIC_GROUP', 9999);
define('GA_GROUP', 9998);

/**
 * Array of content type that can be public/global.
 *
 * @return array
 */
function _country_public_global_content_types() {
  return ['news', 'event', 'document'];
}

/**
 * Implements hook_form_alter().
 */
function country_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // The google map is shown and hidden based on field conditions and custom
  // js is needed to calculate its dimensions once it is displayed again.
  if ($form_id === 'group_country_edit_form' || $form_id === 'group_country_add_form') {
    $form['#attached'];
    $form['#attached']['library'][] = 'country/country.map';
  }
}
/**
 * Implements hook_node_access().
 */
function country_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ('view' === $op) {
    $result = gnode_node_access($node, $op, $account);

    if (in_array($node->getType(), _country_public_global_content_types())) {

      if (isset($node->global_content)) {
        $global_content = (int) $node->global_content->value;
        $global = AccessResult::allowedIf(1 == $global_content && $account->isAuthenticated());
      }

      if (isset($node->public_content)) {
        $public_content = (int) $node->public_content->value;
        $public = AccessResult::allowedIf(1 == $public_content);
      }

      if ($result->isNeutral() && $account->isAnonymous()) {
        $result = AccessResult::forbidden();
      }
      if ($global->isAllowed() || $public->isAllowed()) {
        $result = AccessResult::allowed();
      }

      // Restrict the access to related entities if its parent group is country
      // and it's unpublished.
      $group_contents = \Drupal::entityTypeManager()
        ->getStorage('group_content')
        ->loadByProperties([
          'entity_id' => $node->id(),
        ]);

      foreach ($group_contents as $group_content) {
        /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
        $group = $group_content->getGroup();
        if ($group->getGroupType()->id() === 'country') {
          if ($group->hasField('field_group_status') && $group->get('field_group_status')->value === 'unpublished') {
            if (!\Drupal\group\Access\GroupAccessResult::allowedIfHasGroupPermission($group, $account, 'edit group')->isAllowed()) {
              return AccessResult::forbidden();
            }
          }
        }
      }

      // Check for GA supergroup access.
//      $parents = _get_parent_supergroups($node);
//      $parent_access = TRUE;
//      if (!empty($parents)) {
//        foreach ($parents as $supergroup) {
//          $plugin_id = $node->bundle();
//          if ('governance_area' == $supergroup->getGroupType()->id() && !$supergroup->hasPermission("view group_node:$plugin_id entity", $account)) {
//            $parent_access = FALSE;
//          }
//        }
//        $result = AccessResult::forbiddenIf($parent_access === FALSE);
//      }

    }

    // Check node group content permissions.
    // if ($account->hasPermission('always access to node view')) {
    //  if ($node instanceof GroupInterface) {
    //    $bypass = AccessResult::allowedIfHasPermissions($account, ['bypass group access']);
    //
    //    if (GroupAccessResult::allowedIfHasGroupPermission($node, $account, 'view group')
    //      ->isAllowed() || $bypass->isAllowed()
    //    ) {
    //      return AccessResult::allowed();
    //    }
    //    else {
    //      return AccessResult::forbidden();
    //    }
    //  }
    // }
    return $result;

  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function country_group_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Custom access check to verify if the current user have access to Universal
  // Object Country group attached to Governance area.
  // First we check if the current user has "Co-Admin" role assigned. If not,
  // we check if the current user is member to the UO Country group. If not,
  // we check if the current user is member to the parent Governance area group.
  if ($entity->bundle() === 'country' && ($entity->hasField('field_type') && $entity->get('field_type')->value === 'governance_area')) {
    if (in_array('co_admin', $account->getRoles())) {
      return AccessResult::allowed();
    }
    elseif ($entity->getMember($account)) {
      return AccessResult::allowed();
    }
    else {
      $manager = Drupal::service('ggroup.group_hierarchy_manager');
      $super_groups = $manager->getGroupSupergroups($entity);

      foreach ($super_groups as $super_group) {
        if ($super_group->getMember($account)) {
          return AccessResult::allowed();
        }
      }
    }

    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function country_file_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (in_array($operation, ['download', 'view'])) {
    $file = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $entity->getFileUri()]);

    if (!empty($file)) {
      /* @var File $file */
      $file = reset($file);

      if ('document' === $file->bundle()) {
        $usages = \Drupal::service('file.usage')->listUsage($file);

        foreach ($usages as $module => $entity_types) {
          if ('file' === $module) {
            foreach ($entity_types as $entity_type => $value) {
              if ('paragraph' === $entity_type) {
                /* @var Paragraph $paragraph */
                $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load(key($value));
                /* @var Node $node */
                $node = $paragraph->getParentEntity();
                $access = country_node_access($node, 'view', $account);

                return $access->isForbidden() ? $access : AccessResult::allowed();
              }
            }
          }
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access_records_alter().
 */
function country_node_access_records_alter(array &$grants, NodeInterface $node) {

  if (in_array($node->getType(), _country_public_global_content_types())) {
    $gnode_grants = gnode_node_access_records($node);

    if (empty($gnode_grants)) {
      $grants[] = [
        'realm' => 'content:nongroup',
        'gid' => NON_GROUP,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => -1,
      ];
    }

    if (isset($node->public_content)) {
      $public_content = $node->public_content->value;

      if (1 == $public_content) {
        $grants[] = [
          'realm' => 'public_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

    if (isset($node->global_content)) {
      $global_content = $node->global_content->value;

      if (1 == $global_content) {
        $grants[] = [
          'realm' => 'global_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

//    if ($is_ga = _check_governance_area_group($node)) {
//      $base_grant_realm = 'gnode:' . $node->getType();
//      foreach ($grants as $key => $grant) {
//        if ($grant['realm'] == $base_grant_realm) {
//          unset($grants[$key]);
//        }
//      }
//
//      $grants[] = [
//        'realm' => 'content:ga_group',
//        'gid' => GA_GROUP,
//        'grant_view' => 1,
//        'grant_update' => 0,
//        'grant_delete' => 0,
//        'priority' => 0,
//      ];
//    }
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function country_node_grants_alter(array &$grants, AccountInterface $account, $op) {
  if ($op == 'view') {
    $grants['public_group'] = [PUBLIC_GROUP];

    if ($account->isAuthenticated()) {
      $grants['content:nongroup'] = [NON_GROUP];
      $grants['global_group'] = [PUBLIC_GROUP];
    }

    /* @var \Drupal\group\GroupMembershipLoaderInterface $membership_loader */
    $membership_loader = \Drupal::service('group.membership_loader');
    foreach ($membership_loader->loadByUser($account) as $group_membership) {
      $group = $group_membership->getGroup();
      if ('governance_area' == $group->getGroupType()->id()) {
        $grants['content:ga_group'] = [GA_GROUP];
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function country_module_implements_alter(array &$implementations, $hook) {
  if ('node_access' === $hook && isset($implementations['gnode'])) {
    $gnode = $implementations['gnode'];
    unset($implementations['gnode']);
    $implementations = array_merge(['gnode' => $gnode], $implementations);
  }

  if ('form_alter' === $hook && isset($implementations['password_policy'])) {
    $password_policy = $implementations['password_policy'];
    unset($implementations['password_policy']);
    $implementations = array_merge(['password_policy' => $password_policy], $implementations);
  }
}

/**
 * Implements hook_views_post_render().
 */
function country_views_post_render($view) {
  // By doing this we override the title of UO - Countries listing pages with
  // a value provided in the parent group.
  //
  // list_of_projects:block_3 is related to Universal Object - Countries for
  // Geographical, Knowledge and Products objects.
  //
  // list_of_projects:block_5 is related to Universal Object - Countries for
  // GA object.
  //
  // search_for_a_country_or_region:block_2 is related to UO Country subpage.
  if (($view->id() == 'list_of_projects'
      && ($view->current_display == 'block_3' || $view->current_display == 'block_5' || $view->current_display == 'block_6'))
      || ($view->id() == 'search_for_a_country_or_region' && ($view->current_display == 'block_2' || $view->current_display == 'block_6'))
  ) {

    // The parent Region group is passed as argument, we load it to get its
    // label value.
    $group_id = reset($view->args);
    if ($group_id) {
      $group = \Drupal\group\Entity\Group::load($group_id);

      if ($group->hasField('field_label')) {
        $label = $group->get('field_label')->value;

        if (!empty($label)) {
          $view->setTitle($label);
        }
      }
    }
  }

  // Override "See all countries" link on Region and Closed region page.
  if ($view->id() === 'list_of_projects' && ($view->current_display === 'block_3' || $view->current_display === 'block_6')) {
    if (empty($label)) {
      if ($group->hasField('field_label')) {
        $label = $group->get('field_label')->value;
      }
    }

    if (!empty($label)) {
      $view->display_handler->setOption('use_more_text', t("See all @objects", ['@objects' => $label]));
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function country_views_pre_execute($view) {
  // Number of objects field has been added to Region and Closed region group
  // type, which allows us to control how many countries will be displayed on
  // the region page. If the field has "0" value all the countries will be
  // displayed, if the field is empty only 3 objects will be displayed,
  // in any other case we show the number of countries specified in the field.
  if (($view->id() == 'list_of_projects' && ($view->current_display == 'block_6' || $view->current_display == 'block_3'))) {
    $connection = \Drupal\Core\Database\Database::getConnection();

    $group_id = reset($view->args);
    if (!empty($group_id)) {
      $query = $connection->select('group__field_number_of_objects', 'no');
      $query->fields('no', ['field_number_of_objects_value']);
      $query->condition('no.entity_id', $group_id, '=');
      $number_of_objects = $query->execute()->fetchField();


      if ($number_of_objects !== FALSE) {
        $view->query->setLimit($number_of_objects);
      }
    }
  }
}
///**
// * Get group content parent groups.
// *
// * @param Node $node
// *   Node entity
// *
// * @return array|\Group[]
// *   Array of parent Groups
// */
//function _get_parent_supergroups($node) {
//  $parents = [];
//  $plugin_id = 'group_node:' . $node->bundle();
//  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
//  // Load all the group content for this node.
//  $group_contents = \Drupal::entityTypeManager()
//    ->getStorage('group_content')
//    ->loadByProperties([
//      'type' => array_keys($group_content_types),
//      'entity_id' => $node->id(),
//    ]);
//
//  if (!empty($group_contents)) {
//    foreach ($group_contents as $group_content) {
//      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
//      $group = $group_content->getGroup();
//      /* @var GroupHierarchyManager $subgroup_manage */
//      $subgroup_manage = \Drupal::service('ggroup.group_hierarchy_manager');
//
//      /* @var Group[] $parents */
//      $parents = $subgroup_manage->getGroupSupergroups($group);
//    }
//  }
//
//  return $parents;
//}

///**
// * Check for Governance Area supergroup node.
// *
// * @param Node $node
// *   Node object.
// *
// * @return bool
// *   Node is in Governance Area status.
// */
//function _check_governance_area_group($node) {
//  $parents = _get_parent_supergroups($node);
//  $is_ga = FALSE;
//  if (!empty($parents)) {
//    foreach ($parents as $supergroup) {
//      if ('governance_area' == $supergroup->getGroupType()->id()) {
//        $is_ga = TRUE;
//      }
//    }
//  }
//
//  return $is_ga;
//}
