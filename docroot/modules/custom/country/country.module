<?php

/**
 * @file
 * Contains country.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\group\Entity\GroupContentType;

define('NON_GROUP', 1);
define('PUBLIC_GROUP', 9999);
define('GA_GROUP', 9998);

/**
 * Array of content type that can be public/global.
 *
 * @return array
 */
function _country_public_global_content_types() {
  return ['news', 'event', 'document'];
}

/**
 * Implements hook_node_access().
 */
function country_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ('view' === $op) {
    $result = gnode_node_access($node, $op, $account);

    if (in_array($node->getType(), _country_public_global_content_types())) {

      if (isset($node->global_content)) {
        $global_content = (int) $node->global_content->value;
        $global = AccessResult::allowedIf(1 == $global_content && $account->isAuthenticated());
      }

      if (isset($node->public_content)) {
        $public_content = (int) $node->public_content->value;
        $public = AccessResult::allowedIf(1 == $public_content);
      }

      if ($result->isNeutral() && $account->isAnonymous()) {
        $result = AccessResult::forbidden();
      }
      if ($global->isAllowed() || $public->isAllowed()) {
        $result = AccessResult::allowed();
      }

      // Check for GA supergroup access.
      $parents = _get_parent_supergroups($node);
      $parent_access = TRUE;
      if (!empty($parents)) {
        foreach ($parents as $supergroup) {
          $plugin_id = $node->bundle();
          if ('governance_area' == $supergroup->getGroupType()->id() && !$supergroup->hasPermission("view group_node:$plugin_id entity", $account)) {
            $parent_access = FALSE;
          }
        }
        $result = AccessResult::forbiddenIf($parent_access === FALSE);
      }

    }

    // Check node group content permissions.
    // if ($account->hasPermission('always access to node view')) {
    //  if ($node instanceof GroupInterface) {
    //    $bypass = AccessResult::allowedIfHasPermissions($account, ['bypass group access']);
    //
    //    if (GroupAccessResult::allowedIfHasGroupPermission($node, $account, 'view group')
    //      ->isAllowed() || $bypass->isAllowed()
    //    ) {
    //      return AccessResult::allowed();
    //    }
    //    else {
    //      return AccessResult::forbidden();
    //    }
    //  }
    // }
    return $result;

  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function country_file_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (in_array($operation, ['download', 'view'])) {
    $file = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $entity->getFileUri()]);

    if (!empty($file)) {
      /* @var File $file */
      $file = reset($file);

      if ('document' === $file->bundle()) {
        $usages = \Drupal::service('file.usage')->listUsage($file);

        foreach ($usages as $module => $entity_types) {
          if ('file' === $module) {
            foreach ($entity_types as $entity_type => $value) {
              if ('paragraph' === $entity_type) {
                /* @var Paragraph $paragraph */
                $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load(key($value));
                /* @var Node $node */
                $node = $paragraph->getParentEntity();
                $access = country_node_access($node, 'view', $account);

                return $access->isForbidden() ? $access : AccessResult::allowed();
              }
            }
          }
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access_records_alter().
 */
function country_node_access_records_alter(array &$grants, NodeInterface $node) {

  if (in_array($node->getType(), _country_public_global_content_types())) {
    $gnode_grants = gnode_node_access_records($node);

    if (empty($gnode_grants)) {
      $grants[] = [
        'realm' => 'content:nongroup',
        'gid' => NON_GROUP,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => -1,
      ];
    }

    if (isset($node->public_content)) {
      $public_content = $node->public_content->value;

      if (1 == $public_content) {
        $grants[] = [
          'realm' => 'public_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

    if (isset($node->global_content)) {
      $global_content = $node->global_content->value;

      if (1 == $global_content) {
        $grants[] = [
          'realm' => 'global_group',
          'gid' => PUBLIC_GROUP,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

    if ($is_ga = _check_governance_area_group($node)) {
      $base_grant_realm = 'gnode:' . $node->getType();
      foreach ($grants as $key => $grant) {
        if ($grant['realm'] == $base_grant_realm) {
          unset($grants[$key]);
        }
      }

      $grants[] = [
        'realm' => 'content:ga_group',
        'gid' => GA_GROUP,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
    }
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function country_node_grants_alter(array &$grants, AccountInterface $account, $op) {
  if ($op == 'view') {
    $grants['public_group'] = [PUBLIC_GROUP];

    if ($account->isAuthenticated()) {
      $grants['content:nongroup'] = [NON_GROUP];
      $grants['global_group'] = [PUBLIC_GROUP];
    }

    /* @var \Drupal\group\GroupMembershipLoaderInterface $membership_loader */
    $membership_loader = \Drupal::service('group.membership_loader');
    foreach ($membership_loader->loadByUser($account) as $group_membership) {
      $group = $group_membership->getGroup();
      if ('governance_area' == $group->getGroupType()->id()) {
        $grants['content:ga_group'] = [GA_GROUP];
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function country_module_implements_alter(array &$implementations, $hook) {
  if ('node_access' === $hook && isset($implementations['gnode'])) {
    $gnode = $implementations['gnode'];
    unset($implementations['gnode']);
    array_merge(['gnode' => $gnode], $implementations);
  }

  if ('form_alter' === $hook && isset($implementations['password_policy'])) {
    $password_policy = $implementations['password_policy'];
    unset($implementations['password_policy']);
    $implementations = array_merge(['password_policy' => $password_policy], $implementations);
  }
}

/**
 * Get group content parent groups.
 *
 * @param Node $node
 *   Node entity
 *
 * @return array|\Group[]
 *   Array of parent Groups
 */
function _get_parent_supergroups($node) {
  $parents = [];
  $plugin_id = 'group_node:' . $node->bundle();
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  // Load all the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $node->id(),
    ]);

  if (!empty($group_contents)) {
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      /* @var GroupHierarchyManager $subgroup_manage */
      $subgroup_manage = \Drupal::service('ggroup.group_hierarchy_manager');

      /* @var Group[] $parents */
      $parents = $subgroup_manage->getGroupSupergroups($group);
    }
  }

  return $parents;
}

/**
 * Check for Governance Area supergroup node.
 *
 * @param Node $node
 *   Node object.
 *
 * @return bool
 *   Node is in Governance Area status.
 */
function _check_governance_area_group($node) {
  $parents = _get_parent_supergroups($node);
  $is_ga = FALSE;
  if (!empty($parents)) {
    foreach ($parents as $supergroup) {
      if ('governance_area' == $supergroup->getGroupType()->id()) {
        $is_ga = TRUE;
      }
    }
  }

  return $is_ga;
}
