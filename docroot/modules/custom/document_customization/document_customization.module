<?php

/**
 * Implements hook_form_alter().
 */
function document_customization_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $route = \Drupal::routeMatch()->getRouteName();

  if ($form_id === 'node_document_form') {
    $current_them = \Drupal::service('theme.manager')->getActiveTheme();
    if ($current_them->getName() === 'ample') {
      // Hide organization field when user is using the ample theme.
      $form['field_organization']['#access'] = FALSE;
      $form['field_content_date']['#access'] = FALSE;
      $form['field_add_event_in_group']['widget']['#required'] = TRUE;

      if (!empty($form['field_add_event_in_group']['widget']['#options'])) {
        $region_options = [];
        $area_options = [];

        foreach ($form['field_add_event_in_group']['widget']['#options'] as $key => $values) {
          if ($key !== '_none') {
            // Rename select list group names.
            unset($form['field_add_event_in_group']['widget']['#options'][$key]);

            if (!empty($values)) {
              foreach ($values as $gid => $group_name) {
                // Change the grouping for the options in add in group select list.
                $group = Drupal::entityTypeManager()->getStorage('group')->load($gid);

                if ($group) {
                  $geo_object = array();
                  if ($group->hasField('field_geographical_object')) {
                    $geo_object = $group->get('field_geographical_object')->getValue();
                  }
                  $group_type = $group->getGroupType()->id();
                  if (!empty($geo_object) && isset($geo_object[0]) && $geo_object[0]['value'] === '1') {
                    switch ($group_type) {
                      case 'country':
                        $form['field_add_event_in_group']['widget']['#options']['Country'][$gid] = $group_name;
                        break;

                      case 'region':
                        $region_options['Region'][$gid] = $group_name;
                        break;

                      case 'project':
                        $form['field_add_event_in_group']['widget']['#options']['Collaborations'][$gid] = $group_name;
                        break;

                      default:
                        break;
                    }
                  }
                  else {
                    switch ($group_type) {
                      case 'country':
                      case 'country_protected':
                        $manager = \Drupal::service('ggroup.group_hierarchy_manager');
                        $parent_groups = $manager->getGroupSupergroups($group->id());

                        if (!empty($parent_groups)) {
                          $parent_group = $parent_groups[key($parent_groups)];

                          if (isset($parent_group)) {
                            $parent_label = $parent_group->get('label')->getValue();
                            if (!empty($parent_label) && isset($parent_label[0])) {
                              $parent_label = $parent_label[0]['value'];
                              $area_options['P4H Areas'][$gid] = $parent_label . ' - ' . $group_name;
                            }
                            else {
                              $area_options['P4H Areas'][$gid] = $group_name;
                            }
                          }
                        }
                        break;

                      default:
                        $area_options['P4H Areas'][$gid] = $group_name;
                        break;
                    }
                  }
                }
              }
            }
          }
        }

        $empty_option['_none'] = $form['field_add_event_in_group']['widget']['#options']['_none'];
        unset($form['field_add_event_in_group']['widget']['#options']['_none']);
        $clear_options = $form['field_add_event_in_group']['widget']['#options'];

        $form['field_add_event_in_group']['widget']['#options'] = array_merge(
          $empty_option,
          $area_options,
          $region_options,
          $clear_options
        );

      }
    }

    foreach (array_keys($form['actions']) as $action) {
      if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'document_customization_add_new_document_custom_submit';
      }
    }
    if ($route === 'entity.group_content.create_form') {
      // Hide group's autocomplete.
      $form['field_add_event_in_group']['#access'] = FALSE;
    }
  }
  if ($form_id === 'node_document_edit_form') {
    $current_them = \Drupal::service('theme.manager')->getActiveTheme();
    if ($current_them->getName() === 'ample') {
      // Hide organization field when user is using the ample theme.
      $form['field_organization']['#access'] = FALSE;
      $form['field_content_date']['#access'] = FALSE;
    }

    $form['field_add_event_in_group']['#access'] = FALSE;
  }
}

/**
 * Custom validate handler for document create form used by authenticated users.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return bool
 */
function document_customization_custom_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if($form['#form_id'] === 'node_document_form' || $form['#form_id'] === 'node_document_edit_form') {
    $values = $form_state->getValues();
    if (!empty($values['field_document_link']) && !empty($values['field_document_link'][0]['uri'])) {
      return TRUE;
    }
    elseif (!empty($values['field_document_link']) && !empty($values['field_document_file'][0]['fids'])) {
      return TRUE;
    }
    else {
      $form_state->setError($form, t('Document link or Document file field shouldn\'t be empty.'));
    }

    $current_theme = \Drupal::service('theme.manager')->getActiveTheme();
    $selected_group = $form_state->getValue('field_add_event_in_group');

    if ($current_theme->getName() === 'ample' && empty($selected_group[0]['target_id'])) {
      $form_state->setError($form, t('P4H Area is required.'));
    }
  }
}

/**
 * Custom submit handler to attach document to group.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function document_customization_add_new_document_custom_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $selected_group = $form_state->getValue('field_add_event_in_group');

  if (!empty($selected_group[0]['target_id'])) {
    // Get the selected group object.
    $selected_gid = $selected_group[0]['target_id'];
    $group = Drupal::entityTypeManager()->getStorage('group')->load($selected_gid);

    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();

    // Add the new event to the selected group.
    $group->addContent($entity, 'group_node:document');
  }
}
