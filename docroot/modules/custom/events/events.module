<?php

/**
 * @file
 * This is the Custom Events module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\datetime_range\Plugin\Field\FieldType\DateRangeFieldItemList;
use Drupal\group\Entity\Group;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_views_data_alter().
 */
function events_views_data_alter(array &$data) {
  if (isset($data['node'])) {
    // Add the current company computed field to Views.
    $data['node']['color'] = [
      'title' => t('Random color'),
      'field' => [
        'id' => 'events_random_color',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function events_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $type = $entity->getType();
  $user = Drupal::currentUser();
  if ('event' == $type) {
    if ('default' == $view_mode && TRUE === $user->isAnonymous()) {
      $build['signup_link'] = [
        '#title' => new TranslatableMarkup('Sign up for event'),
        '#type' => 'link',
        '#url' => Url::fromRoute('user.login'),
        '#weight' => -10,
      ];
    }
    /** @var \Drupal\Core\Session\AccountInterface $account */
    $account = \Drupal::currentUser()->getAccount();
    // List with groups that should have access to calendar page.
    $groups = array(
      'governance_area',
      'region',
      'country',
      'project',
      'region_protected',
      'country_protected',
      'project_protected',
    );
    /** @var \Drupal\menu_item_visibility_by_group\MenuItemVisibilityCheckByGroup $check_by_group */
    $check_by_group = \Drupal::service('menu_item_visibility_by_group.check_by_group');
    if ($check_by_group->check($account, $groups)) {
      $build['event_registrant'] = views_embed_view('event_sign_up', 'block_1', $entity->id());
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function events_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /* @var \Drupal\node\Entity\Node $entity */
  $type = $entity->getType();
  if ('event' == $type) {
    /** @var \Drupal\Core\Session\AccountInterface $account */
    $account = \Drupal::currentUser()->getAccount();
    // List with groups that should have access to calendar page.
    $groups = array(
      'governance_area',
      'region',
      'country',
      'project',
      'region_protected',
      'country_protected',
      'project_protected',
    );
    /** @var \Drupal\menu_item_visibility_by_group\MenuItemVisibilityCheckByGroup $check_by_group */
    $check_by_group = \Drupal::service('menu_item_visibility_by_group.check_by_group');
    if (!$check_by_group->check($account, $groups)) {
      $build['like_and_dislike']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function events_entity_extra_field_info() {
  $extra['node']['event']['form']['custom_date_widget'] = [
    'label' => t('Custom Date Widget'),
    'weight' => 0,
  ];
  $extra['node']['event']['display']['event_registrant'] = [
    'label' => t('Event Registrant'),
    'weight' => 0,
    'visible' => FALSE,
  ];
  return $extra;
}

/**
 * Implements hook_views_query_alter().
 */
function events_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (!in_array($view->id(), ['my_calendar'])) {
    return;
  }

  if (in_array($view->current_display, ['block_1', 'data_export_2'])) {
    // group_graph_group_content_field_data.uid
    $query->where[2]['conditions'][0]['value'] = \Drupal::currentUser()->id();
  }
}

/**
 * Implements hook_views_post_build().
 */
function events_views_post_build(ViewExecutable $view) {
  if (!in_array($view->id(), ['my_calendar'])) {
    return;
  }

  foreach ($view->feedIcons as &$feed_icon) {
    $feed_icon['#theme'] = 'feed_icon__download';
  }
}


/**
 * Implements hook_views_pre_render().
 *
 * @see \Drupal\gnode\Plugin\GroupContentEnabler\GroupNode::getGroupOperations()
 */
function events_views_pre_render(ViewExecutable $view) {
  if (!in_array($view->id(), ['my_calendar'])) {
    return $view;
  }

  // Check if user has access to a group_node:event create form.
  if (!empty($view->argument['group_id_depth'])
    /** @var \Drupal\group\Entity\GroupInterface $group */
    && ($group = Group::load($view->argument['group_id_depth']->getValue())))
  {
    $account = \Drupal::currentUser();
    $plugin_id = 'group_node:event';

    if ($group->hasPermission("create $plugin_id entity", $account)) {
      $view->element['#attached']['drupalSettings']['events'] = [
        'group_allow_access_to_popup' => TRUE,
      ];
    }
  }
  elseif ($view->current_display === 'block_1') {
    $uid = Drupal::currentUser()->id();

    $get_memberships = \Drupal\Core\Database\Database::getConnection()->select('group_content_field_data', 'group_content_field_data');
    $get_memberships->fields('group_content_field_data', array('gid'));
    $get_memberships->condition('group_content_field_data.entity_id', $uid, '=');
    $results = $get_memberships->execute()->fetchAll();

    if (!empty($results)){
      $account = \Drupal::currentUser();
      $groups = array(
        'governance_area',
        'region',
        'country',
        'project',
        'region_protected',
        'country_protected',
        'project_protected',
      );

      foreach ($results as $result) {
        $group = Drupal::entityTypeManager()->getStorage('group')->load($result->gid);
        $type = $group->getGroupType()->id();

        if (in_array($type, $groups) && $group->hasPermission("create group_node:event entity", $account)) {
          $view->element['#attached']['drupalSettings']['events'] = [
            'group_allow_access_to_popup' => TRUE,
          ];
        }
      }
    }
  }

  return $view;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function events_vote_type_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\menu_item_visibility_by_group\MenuItemVisibilityCheckByGroup $check_by_group */
  $check_by_group = \Drupal::service('menu_item_visibility_by_group.check_by_group');
  if ($check_by_group->check($account, ['governance_area']) && 'view' == $operation) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_views_plugins_display_alter().
 */
function events_views_plugins_display_alter(array &$plugins) {
  if(isset($plugins['data_export'])){
    $data_export = &$plugins['data_export'];
    $data_export['class'] = 'Drupal\events\Custom\views\display\DataExport';
  }
}

/**
 * Implements hook_ENTITY_TYPE_ID_create().
 */
function events_node_create(NodeInterface $node) {
  if ($node->bundle() == 'event' && $node->hasField('field_date')
    && $date = \Drupal::request()->query->get('date'))
  {
    $field = $node->get('field_date');
    $default_value = [
      [
        'default_date_type' => 'custom',
        'default_date' => format_date(strtotime($date . " 00:00:00"), 'custom', DATETIME_DATETIME_STORAGE_FORMAT, 'UTC'),
        'default_end_date_type' => 'custom',
        'default_end_date' => format_date(strtotime($date . " 23:59:59"), 'custom', DATETIME_DATETIME_STORAGE_FORMAT, 'UTC'),
      ],
    ];
    $value = DateRangeFieldItemList::processDefaultValue($default_value, $node, $field->getFieldDefinition());
    $field->setValue($value, TRUE);
  }
}

/**
 * Implements hook_form_alter().
 */
function events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_event_form') {
    $route = \Drupal::routeMatch()->getRouteName();
    if($route === 'node.add' || $route === 'page_manager.page_view_my_calendar') {
      foreach (array_keys($form['actions']) as $action) {
        if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'events_add_new_event_custom_submit';
        }
      }
    }
    if($route === 'group.calendar') {
      foreach (array_keys($form['actions']) as $action) {
        if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'events_popup_form_custom_submit_redirect';
        }
      }
    }
  }
}

/**
 * Custom form submit handler.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function events_popup_form_custom_submit_redirect($form, FormStateInterface $form_state) {
  $group = $form_state->get('group');

  $url = Url::fromRoute('group.calendar', array('group' => $group->id()), array('fragment' => 'calendar'));
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_module_implements_alter().
 */
function events_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'form_alter') {
    // In events_form_alter is added custom submit handler which redirects user
    // back to the calendar page. Form_alter in group module overrides this
    // redirect and it is important the custom redirect to be executed last.
    $group = $implementations['events'];
    unset($implementations['events']);
    $implementations['events'] = $group;
  }
}

/**
 * Custom submit handler to attach event to group.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function events_add_new_event_custom_submit($form, FormStateInterface $form_state) {
  $selected_group = $form_state->getValue('field_add_event_in_group');

  if (!empty($selected_group[0]['target_id'])) {
    // Get the selected group object.
    $selected_gid = $selected_group[0]['target_id'];
    $group = Drupal::entityTypeManager()->getStorage('group')->load($selected_gid);

    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();

    // Add the new event to the selected group.
    $group->addContent($entity, 'group_node:event');

    $url = Url::fromRoute('page_manager.page_view_my_calendar',
      array('group' => $group->id()),
      array('fragment' => 'calendar')
    );

    $form_state->setRedirectUrl($url);
  }
}
