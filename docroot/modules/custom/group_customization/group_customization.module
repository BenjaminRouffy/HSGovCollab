<?php

/**
 * @file
 * Group customization module main file.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupInterface;

/**
 * Implements hook_preprocess_html().
 */
function group_customization_preprocess_html(array &$variables) {
  // Add class to body by group context.
  if (($group = \Drupal::routeMatch()->getParameter('group')) && $group->id()) {
    $variables['attributes']['class'][] = 'group-' . $group->bundle();
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function group_customization_entity_type_alter(array &$entity_types) {
  if (!empty($entity_types['group'])) {
    $entity_types['group']->setFormClass('delete', 'Drupal\group_customization\Entity\Form\GroupDeleteForm');
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function group_customization_node_grants_alter(array &$grants, AccountInterface $account, $op) {
  if ('view' === $op) {
    $key_name_alter = [];
    // Skip gnode alter activities.
    if ($account->hasPermission('bypass group access')) {
      return;
    }

    // Get all gnode granted rules.
    foreach (array_keys($grants) as $key) {
      if (FALSE === strpos($key, 'gnode')) {
        continue;
      }
      $key_name_alter[] = $key;
    }

    if (!empty($key_name_alter)) {
      $unpublished = _group_customization_get_unpublished_groups();
      foreach ($key_name_alter as $key) {
        $grants[$key] = array_values(array_diff($grants[$key], $unpublished));
      }
    }
  }
}
/**
 * Implements hook_ENTITY_TYPE_access().
 */
function group_customization_group_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // @var \Drupal\group_customization\Access\GroupPermissionAccessCheck $groupPermissionAccess
  $groupPermissionAccess = \Drupal::getContainer()
    ->get('group_customization.group.permission');
  return $groupPermissionAccess->checkAccess($entity, $operation, $account, [
    'published',
    'content',
  ]);
}

/**
 * Return unpublished group IDs.
 */
function _group_customization_get_unpublished_groups() {
  $entity_type_manager = \Drupal::entityTypeManager();

  $query = $entity_type_manager->getStorage('group')->getQuery();
  $query->condition('type', 'country');
  $group = $query->orConditionGroup()
    ->notExists('field_group_status')
    ->condition('field_group_status', 'unpublished');
  $query->condition($group);

  return $query->execute();
}

/**
 * Implements hook_query_TAG_alter().
 */
function group_customization_query_group_country_alter(AlterableInterface $query) {
  // @TODO Remove tag "group_country" and update views.
}

/**
 * Implements hook_entity_base_field_info().
 */
function group_customization_entity_base_field_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['group'])) {
    $fields['group_status'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Group Status'))
      ->setDescription(t('Group Status'));

    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 */
function group_customization_entity_presave(EntityInterface $entity) {
  if (in_array($entity->getEntityTypeId(), ['group'])) {
    if ($entity instanceof GroupInterface) {
      if ($entity->getGroupType()->id() !== 'country_protected') {
        if ($entity->hasField('field_group_status')) {
          $group_status = $entity->get('field_group_status')->value ?: 'unpublished';
          $entity->set('group_status', $group_status);
        }
      }
      else {
        $entity->set('group_status', 'published');
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function group_customization_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, array('group_content_group_content_type_bd1c359f1021e_add_form',
    'group_content_group_content_type_8f1540bfd3b5b_add_form'))) {
    // Change autocomplete handler for Users, which could be added to Closed groups.
    // This is applicable only for Universal Object Country - Closed and
    // Universal Object Country - Collaboration.
    $gid = \Drupal::request()->get('group')->id();
    if (!empty($form['entity_id']['widget']) && isset($form['entity_id']['widget'][0]) && isset($form['entity_id']['widget'][0]['target_id'])) {
      $form['entity_id']['widget'][0]['target_id']['#selection_handler'] = 'views';
      $form['entity_id']['widget'][0]['target_id']['#selection_settings'] = [
        'view' => array(
          'view_name' => 'closed_group_user_reference',
          'display_name' => 'entity_reference_1',
          'arguments' => array($gid),
        ),
        'match_operator' => 'CONTAINS',
      ];
    }
  }

  // Attendee group role is used in Closed groups. It's not visible for the
  // user that's why when someone is added as member without specified
  // role we use Attendee as default. Custom role is needed here, because
  // the default "Member" group role isn't mapped correctly and its
  // permissions doesn't work.
  $closed_membership_forms = [
    'group_content_group_content_type_d99f0eda380b7_add_form',
    'group_content_group_content_type_d99f0eda380b7_edit_form',
    'group_content_group_content_type_bd1c359f1021e_add_form',
    'group_content_group_content_type_bd1c359f1021e_edit_form',
    'group_content_group_content_type_8f1540bfd3b5b_add_form',
    'group_content_group_content_type_8f1540bfd3b5b_edit_form',
  ];

  if (in_array($form_id, $closed_membership_forms)) {
    unset($form['group_roles']['widget']['#options']['region_protected-attendee']);
    unset($form['group_roles']['widget']['#options']['country_protected-attendee']);
    unset($form['group_roles']['widget']['#options']['project_protected-attendee']);
  }
}

/**
 * Implements hook_local_tasks_alter().
 *
 * Rename "Related entities" to Relate/add content.
 */
function group_customization_local_tasks_alter(&$local_tasks) {
  if (!empty($local_tasks['group.content']['title'])) {
    $local_tasks['group.content']['title'] = t('Relate/add content');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function group_customization_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $route = \Drupal::routeMatch()->getRouteName();
  if ($route === 'entity.group.add_form' || $route === 'entity.group.edit_form') {
    $group_type = \Drupal::routeMatch()->getParameter('group_type');
    $group = \Drupal::routeMatch()->getParameter('group');
    if ((isset($group_type) && $group_type->id() === 'country_protected')
      || (isset($group)) && $group->getGroupType()->id() === 'country_protected') {
      // If group is closed country hide private content checkbox.
      if ($element['#entity_type'] === 'paragraph') {
        // Paragraph bundles for which this checkn=box needs to be hidden.
        $bundles = array('infographic_item', 'content_image', 'content_text');
        if (in_array($element['#bundle'], $bundles)) {
          $item = $context['items'];
          if ($item->getName() === 'field_private_content') {
            // Hide private content checkbox.
            $element['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_query_alter().
 *
 * Remove duplication.
 */
function group_customization_query_alter(AlterableInterface $query) {
  $tables = $query->getTables();

  if ($query->hasTag('views_news_and_events_group') && !empty($tables['group_content_field_data'])) {
    $fields =& $query->getFields();

    foreach ($fields as $key => $field) {
      $query->addExpression('MAX('. $field['table'] . '.' . $field['field'] . ')', $field['alias']);
      unset($fields[$key]);
    }

    $query->addField('group_content_field_data', 'entity_id');
    $query->groupBy('entity_id');
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Set custom labels for collaboration.
 */
function group_customization_preprocess_field(&$variables) {
  $element = $variables['element'];
  $entity = $element['#object'];
  $field_name = $element['#field_name'];

  if (strpos($field_name, 'field_') === 0) {
    $label_field_name = 'field_label_' .substr($field_name,6);

    if ($entity->hasField($label_field_name)) {
      $value = $entity->get($label_field_name)->getValue();

      if (!empty($value[0]['value'])) {
        $variables['label'] = $value[0]['value'];
      }
    }
  }
}

/**
 * Retrieves region group for the given entity.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity.
 *
 * @return \Drupal\group\Entity\GroupInterface|null
 *   Region group if found, NULL otherwise.
 */
function group_customization_get_node_region(ContentEntityInterface $entity) {
  // Group list that treat to be parents of the content node.
  static $group_types = array(
    'region',
    'region_protected',
  );

  /** @var \Drupal\ggroup\GroupHierarchyManager $manager */
  $manager = \Drupal::service('ggroup.group_hierarchy_manager');

  /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
  $group_contents = GroupContent::loadByEntity($entity);
  foreach ($group_contents as $group_content) {
    $group = $group_content->getGroup();

    if (in_array($group->bundle(), $group_types)) {
      return $group;
    }

    /** @var \Drupal\group\Entity\GroupInterface[] $super_groups */
    $super_groups = $manager->getGroupSupergroups($group->id());
    foreach ($super_groups as $parent_group) {
      if (in_array($parent_group->bundle(), $group_types)) {
        return $parent_group;
      }
    }
  }

  return NULL;
}

/**
 * Returns event color for the given group.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   Region group to get color from.
 *
 * @return mixed
 *   Color as defined in color_field.
 */
function group_customization_get_region_color(GroupInterface $group) {
  $color = NULL;

  if ($group->hasField('field_event_color')) {
    $field = $group->get('field_event_color');
    if (!$field->isEmpty()) {
      $color = $field->get(0)->getValue();
    }
    else {
      $field_definition = $field->getFieldDefinition();
      $color = $field_definition->getDefaultValue($group)[0];
    }
  }

  return $color;
}
