<?php

/**
 * @file
 * Group customization module main file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_preprocess_html().
 */
function group_customization_preprocess_html(array &$variables) {
  // Add class to body by group context.
  if (($group = \Drupal::routeMatch()->getParameter('group')) && $group->id()) {
    $variables['attributes']['class'][] = 'group-' . $group->bundle();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function group_customization_group_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // @var \Drupal\group_customization\Access\GroupPermissionAccessCheck $groupPermissionAccess
  $groupPermissionAccess = \Drupal::getContainer()
    ->get('group_customization.group.permission');
  return $groupPermissionAccess->checkAccess($entity, $operation, $account, [
    'published',
    'content',
  ]);
}

/**
 * Implements hook_node_grants_alter().
 */
function group_customization_node_grants_alter(array &$grants, AccountInterface $account, $op) {

  $key_name_alter = [];
  // Skip gnode alter activities.
  if($account->hasPermission('bypass group access')) {
    return;
  }

  // Get all gnode granted rules.
  foreach (array_keys($grants) as $key) {
    if (FALSE === strpos($key, 'gnode')) {
      continue;
    }
    $key_name_alter[] = $key;
  }

  if(!empty($key_name_alter)) {
    // Gather the machine names of all node types.
    $entity_type_manager = \Drupal::entityTypeManager();

    $query = $entity_type_manager->getStorage('group')->getQuery();
    $query->condition('type', 'country');
    $group = $query->orConditionGroup()
      ->notExists('field_group_status')
      ->condition('field_group_status', 'unpublished');
    $query->condition($group);

    $unpublished = $query->execute();
    foreach ($key_name_alter as $key) {
      $grants[$key] = array_values(array_diff($grants[$key], $unpublished));
    }

  }

}
