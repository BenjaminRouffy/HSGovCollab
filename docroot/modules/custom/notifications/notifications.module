<?php

/**
 * @file
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_cron().
 */
function notifications_cron() {
  /** @var \Drupal\Core\State\State $state */
  $state = Drupal::state();
  $last_run = $state->get('notifications.cron_settings.last_run', strtotime('-15 minutes', time()));

  $query = Drupal::database()->select('group_content_field_data', 'gcfd');
  $query->fields('gcfd', ['entity_id', 'gid', 'type']);
  $query->condition('gcfd.type', '%news', 'LIKE');
  $query->condition('gcfd.changed', $last_run, '>');
  $results = $query->execute()->fetchAllAssoc('entity_id');

  if (!empty($results)) {
    $group_ids = [];
    foreach ($results as $key => $result) {
      if (!in_array($result->gid, $group_ids)) {
        $group_ids[] = $result->gid;
      }
    }

    // Collect followers uids.
    $uids_query = Drupal::database()->select('group_following_cache', 'gfc');
    $uids_query->fields('gfc', ['uid']);
    $uids_query->condition('gfc.gid', $group_ids, 'IN');
    $uids = $uids_query->execute()->fetchAllAssoc('uid');

    if (!empty($uids)) {
      foreach ($uids as $key => $value) {
        // Populated uids which should have notifications icon.
        $query = Drupal::database()->merge('notifications_mapping');
        $query->key('uid', $key);
        $query->fields(['uid', 'type', 'notification'], [$key, 'news', 1]);
        $query->execute();
      }
    }
  }

  $state->set('notifications.cron_settings.last_run', time());
}

/**
 * Implements hook_block_view_alter().
 */
function notifications_block_view_alter(array &$build, BlockPluginInterface $block) {

  if ($block->getDerivativeId() === 'dashboard-menu' && $build['#id'] === 'dashboardmenu') {

    $type = \Drupal::service('plugin.manager.notification_plugin');
    foreach (array_keys($type->getDefinitions()) as $plugin_id) {
      /** @var \Drupal\notifications\Plugin\NotificationPluginBase $plugin */
      $plugin = $type->createInstance($plugin_id);
      $plugin->blockViewAlter($build, $block);
    }

    $build['#attached']['library'][] = 'notifications/notifications-icon';
    $build['#cache']['max-age'] = 0;

  }

}

/**
 * Helper function for changing users notification status.
 *
 * @return bool
 */
function notifications_remove_user_notifications() {
  $current_user = Drupal::currentUser();

  $query = Drupal::database()->update('notifications_mapping');
  $query->fields(['notification' => 0]);
  $query->condition('uid', $current_user->id(), '=');
  $query->execute();

  return TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function notifications_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'news_events' && $display_id === 'block_2') {
    notifications_remove_user_notifications();
  }
  elseif ($view->id() === 'cd_user_view' && $display_id === 'block_my_contacts') {
    /** @var \Drupal\notifications\Plugin\NotificationPluginManager $type */
    $type = \Drupal::service('plugin.manager.notification_plugin');
    $type->get('my_contacts')
      ->update();
  }
}
