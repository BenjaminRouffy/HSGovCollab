<?php

/**
 * @file
 * Contains p4h_views_plugins.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function p4h_views_plugins_theme() {
  \Drupal::moduleHandler()
    ->loadInclude('p4h_views_plugins', 'inc', 'p4h_views_plugins.theme');
  return [
    'p4h_views_plugins' => [
      'file' => 'p4h_views_plugins.theme.inc',
      'template' => 'p4h_views_plugins',
      'variables' => [
        'tags' => [],
        'options' => [],
        'quantity' => 9,
        'element' => 0,
        'parameters' => []
      ],
    ],
  ];
}

/**
 * Implements hook_entity_base_field_info().
 */
function p4h_views_plugins_entity_base_field_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['node', 'group'])) {
    $fields['computed_date'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed date'))
      ->setDescription(t('Computed date'));

    return $fields;
  }
}

/**
 * Implements hook_form_alter().
 */
function p4h_views_plugins_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // TODO Remove this bebebe restrict.
  if ($form_id == 'views_exposed_form') {
    switch ($form['#id']) {
      case 'views-exposed-form-news-events-block-1':
      case 'views-exposed-form-news-and-events-group-news-and-events-by-group':
      case 'views-exposed-form-news-and-events-group-documents-by-group':
      case 'views-exposed-form-news-and-events-group-region-news-events':
      case 'views-exposed-form-news-and-events-group-block-news-events-project':
        $form['wrap'] = [
          '#prefix' => '<div class="wrapper-filters">',
          '#suffix' => '</div>',
          '#weight' => -100,
        ];

        $form['wrap']['year'] = $form['year'];
        $form['wrap']['month'] = $form['month'];
        unset($form['year'], $form['month']);

        $form['#attached']['drupalSettings'] = [
          'defaultFormSelector' => '#' . $form['#id']
        ];
        break;

      case 'views-exposed-form-list-of-projects-block-full':
      case 'views-exposed-form-list-of-projects-region-full-block':
        $form['label']['#attributes']['placeholder'] = t('Search in projects');
        break;

      case 'views-exposed-form-search-for-a-country-or-region-block-2':
        $form['combine_1']['#attributes']['placeholder'] = t('Search in countries');
        break;
    }
  }
}

/**
 * Implements hook_views_plugins_filter_alter().
 */
function p4h_views_plugins_views_plugins_filter_alter(array &$plugins) {
  $plugins['datetime']['class'] = 'Drupal\p4h_views_plugins\Plugin\views\filter\DateSelect';
  $plugins['combine']['class'] = 'Drupal\p4h_views_plugins\Plugin\views\filter\CustomCombine';
}

/**
 * Implements hook_better_exposed_filters_display_options_alter().
 */
function p4h_views_plugins_better_exposed_filters_display_options_alter(&$display_options, $filter) {
  if (is_a($filter, 'Drupal\p4h_views_plugins\Plugin\views\filter\CustomCombine')) {
    $display_options['bef_ul'] = t('Alphabet Filter');
  }
}

/**
 * Implements hook_entity_presave().
 */
function p4h_views_plugins_entity_presave(EntityInterface $entity) {
  if (in_array($entity->getEntityTypeId(), ['node', 'group'])) {
    $manager = \Drupal::service('plugin.manager.computed_date');
    $plugins = $manager->getDefinitions($entity->bundle());

    if (in_array($entity->bundle(), array_keys($plugins))) {
      /* @var $plugin Drupal\p4h_views_plugins\ComputedDateInterface */
      $plugin = $manager->createInstance($entity->bundle(), ['entity' => $entity]);
      $plugin->updateValue();
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function p4h_views_plugins_views_data_alter(array &$data) {
  $data['node_field_data']['computed_date']['filter']['id'] = 'computed_date';
  $data['group_field_data']['computed_date']['filter']['id'] = 'computed_date';
  $data['group_content_field_data']['gid']['filter']['id'] = 'group_index_gid';

  $data['group_content_field_data']['gid_sub_group'] = array(
    'real field' => 'gid',
    'filter' => array(
      'title' => t('Has group id (with depth)'),
      'id' => 'group_index_gid_subgroup',
    ),
  );
}
