<?php

/**
 * @file
 * Contains user_registration.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_help().
 */
function user_registration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_registration module.
    case 'help.page.user_registration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('User Registration') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function user_registration_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_types */
  if ($entity_types['user']->getFormClass('register') == 'Drupal\user\RegisterForm') {
    $entity_types['user']->setFormClass('register', '\Drupal\user_registration\UserRegistrationRegister');
  }
  if ($entity_types['user']->getFormClass('onetime') == 'Drupal\user\ProfileForm') {
    $entity_types['user']->setFormClass('onetime', '\Drupal\user_registration\ProfileOnetimeForm');
  }
}

/**
 * Implements hook_form_alter().
 */
function user_registration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['name']['#prefix'] = '<div class="login-wrapper">';
    $form['actions']['#suffix'] = '</div>';
    unset($form['name']['#description']);
    unset($form['pass']['#description']);

    $form['actions']['submit']['#value'] = t('Submit');
    $form['user_links']['#weight'] = 9;
    $form['name']['#attributes']['placeholder'] = t('Please enter your email');
    $form['pass']['#attributes']['placeholder'] = t('Please enter your password');
    $form['actions']['#weight'] = 10;
  }
  if ($form_id == 'user_pass' || $form_id == 'user_registration_custom_user_password') {
    $form['name']['#attributes']['placeholder'] = t('Please enter your email');
    unset($form['name']['#description'], $form['mail']);
  }
  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#value'] = t('Submit');
    $form['#group_children']['actions'] = 'group_right';
    unset(
      $form['account']['mail']['#title'],
      $form['account']['notify'],
      $form['field_organisation']['widget']['#description']
    );
    $form['#group_children']['captcha'] = 'group_right';
    $title = &$form['field_accept_term_conditions']['widget']['value']['#title'];
    $title = t('Accept @link', [
      '@link' => \Drupal::l(t('term & conditions'), new Url('<front>', [], [
        '_target' => 'blank'
      ]))
    ]);

    $form['field_disclose_your_personal_det']['#access'] = FALSE;

    _user_registration_manager_field_states($form);
  }
  if ($form_id == 'user_onetime_form') {
    $form['actions']['submit']['#value'] = t('Understood, I am ready to start');
    $form['field_country']['widget']['#title'] = t('Select country of interest');
    $form['field_regions']['widget']['#title'] = t('Select regions of interest');
    $form['field_category']['widget']['#title'] = t('Select categories in the Knowledge Vault');
    unset(
      $form['account']['pass']['#description'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );

    if (in_array('_password_policy_user_profile_form_submit', $form['actions']['submit']['#submit'])) {
      unset($form['actions']['submit']['#submit'][array_search('_password_policy_user_profile_form_submit', $form['actions']['submit']['#submit'])]);

      array_unshift($form['actions']['submit']['#submit'], '_user_registration_user_profile_form_submit');
    }
  }

  if (isset($form['account']['mail'])) {
    $form['account']['mail']['#type'] = 'email_confirm';
  }

  if ($form_id == 'user_form') {
    $current_user = \Drupal::currentUser();

    $form['field_mobilephone']['widget']['add_more']['#value'] = t('Add number');
    $form['field_telephone']['widget']['add_more']['#value'] = t('Add number');
    $form['field_skype_or_other']['widget']['add_more']['add_more_button_software_application']['#value'] = t('Add');
    $form['field_organisations']['widget']['add_more']['add_more_button_organisation']['#value'] = t('Add organisation');
    $form['field_organisation']['widget']['#title'] = t('Main organization');
    $form['account']['current_pass']['#weight'] = $form['account']['pass']['#weight'] -1;
    $form['account']['roles']['#weight'] = 5;
    $form['account']['status']['#weight'] = 0;

    unset(
      $form['field_skype_or_other']['widget']['text'],
      $form['field_organisations']['widget']['text'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );

    // First login attempt detected in UserController, and it has redirected
    // to the edit form here. The first time, force a password to be set.
    if (!empty($_GET['redirected-first-login'])) {
      if ($form_state->get('user_pass_reset')) {
        // In this case we have a valid password reset token. Also force a
        // password to be set at this point.
        $form['account']['pass']['#required'] = TRUE;
      }
    }

    if (!$current_user->hasPermission('change main organisation')) {
      $form['field_organisation']['widget']['#disabled'] = 'disabled';
    }

    $form['#attributes']['class'][] = 'form-my-settings';
    $form['#validate'][] = '_user_registration_group_manager';

    $current_theme = \Drupal::service('theme.manager')->getActiveTheme();

    if ('ample' == $current_theme->getName()) {
      for ($i = 1; $i <= 3; $i++) {
        if (in_array('_password_policy_user_profile_form_submit', $form['submit' . $i]['#submit'])) {
          unset($form['submit' . $i]['#submit'][array_search('_password_policy_user_profile_form_submit', $form['submit' . $i]['#submit'])]);

          array_unshift($form['submit' . $i]['#submit'], '_user_registration_user_profile_form_submit');
        }
      }
    }
    else {
      if (in_array('_password_policy_user_profile_form_submit', $form['submit3']['#submit'])) {
        unset($form['submit3']['#submit'][array_search('_password_policy_user_profile_form_submit', $form['submit3']['#submit'])]);

        array_unshift($form['submit3']['#submit'], '_user_registration_user_profile_form_submit');
      }
    }

    $form['field_disclose_your_personal_det']['#access'] = FALSE;

    // List with field which users can use for following groups.
    $fields = array(
      'field_following_regions',
      'field_following_countries',
      'field_following_projects',
      'field_following_p4h_areas'
    );

    // Collect all groups.
    $query = Drupal::database()->select('groups', 'g');
    $query->leftJoin('groups_field_data', 'gfd', 'g.id = gfd.id');
    $query->fields('g', array('id'));
    $query->fields('gfd', array('label', 'type', 'group_status'));
    $results = $query->execute()->fetchAllAssoc('id');

    // Prepare arrays for collecting options for the different fields.
    $region_option = array();
    $country_option = array();
    $project_option = array();
    $p4h_areas_option = array();

    // If Group is geographical object should be displayed in appropriate following field.
    // If Group isn't geographical object or is protected should be displayed in P4H areas following field.
    foreach ($results as $group) {
      switch ($group->type) {
        case 'country':
          if($group->group_status === 'published') {
            $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group->id);
            if ($group_entity->hasField('field_geographical_object')) {
              $geo_object = $group_entity->get('field_geographical_object')->getValue();
            }
            if (!empty($geo_object) && isset($geo_object[0]) && $geo_object[0]['value'] === '1') {
              if ($group_entity->access('view', $current_user)) {
                $country_option[$group->id] = $group->label;
              }
            }
            else {
              if ($group_entity->access('view', $current_user)) {
                $manager = \Drupal::service('ggroup.group_hierarchy_manager');
                $parent_groups = $manager->getGroupSupergroups($group->id);

                if (!empty($parent_groups)) {
                  foreach ($parent_groups as $parent_group) {
                    $p4h_areas_option[$parent_group->label()][$group->id] = $parent_group->label() . ' - ' . $group->label;
                  }
                }
              }
            }
          }
          break;
        case 'region':
          $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group->id);
          if ($group_entity->hasField('field_geographical_object')) {
            $geo_object = $group_entity->get('field_geographical_object')->getValue();
          }
          if (!empty($geo_object) && isset($geo_object[0]) && $geo_object[0]['value'] === '1') {
            if ($group_entity->access('view', $current_user)) {
              $region_option[$group->id] = $group->label;
            }
          }
          else {
            if ($group_entity->access('view', $current_user)) {
              $p4h_areas_option[$group->label][$group->id] = $group->label;
            }
          }
          break;
        case 'project':
          $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group->id);
          if ($group_entity->hasField('field_geographical_object')) {
            $geo_object = $group_entity->get('field_geographical_object')->getValue();
          }
          if (!empty($geo_object) && isset($geo_object[0]) && $geo_object[0]['value'] === '1') {
            if ($group_entity->access('view', $current_user)) {
              $project_option[$group->id] = $group->label;
            }
          }
          else {
            if ($group_entity->access('view', $current_user)) {
              $project_option[$group->id] = $group->label;
            }
          }
          break;
        case 'region_protected':
        case 'country_protected':
          $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group->id);
          if ($group_entity->access('view', $current_user)) {
            $manager = \Drupal::service('ggroup.group_hierarchy_manager');
            $parent_groups = $manager->getGroupSupergroups($group->id);

            if (!empty($parent_groups)) {
              foreach ($parent_groups as $parent_group) {
                $p4h_areas_option[$parent_group->label()][$group->id] = $parent_group->label() . ' - ' . $group->label;
              }
            }
          }
          break;
        case 'project_protected':
          $group_entity = \Drupal::entityTypeManager()->getStorage('group')->load($group->id);
          if ($group_entity->access('view', $current_user)) {
            $project_option[$group->id] = $group->label;
          }
          break;
        default:
          break;
      }
    }

    // Set the new options list to the fields.
    foreach ($fields as $field_id) {
      if (!empty($form[$field_id]['widget']) && !empty($form[$field_id]['widget'][0])
        && !empty($form[$field_id]['widget'][0]['entity_gids'])) {
        switch ($field_id) {
          case 'field_following_countries':
            asort($country_option);
            $form[$field_id]['widget'][0]['entity_gids']['#options'] = $country_option;
            break;
          case 'field_following_projects':
            asort($project_option);
            $form[$field_id]['widget'][0]['entity_gids']['#options'] = $project_option;
            break;
          case 'field_following_regions':
            asort($region_option);
            $form[$field_id]['widget'][0]['entity_gids']['#options'] = $region_option;
            break;
          case 'field_following_p4h_areas':
            asort($p4h_areas_option);
            foreach ($p4h_areas_option as $key => $values) {
              asort($p4h_areas_option[$key]);
            }
            $form[$field_id]['widget'][0]['entity_gids']['#options'] = $p4h_areas_option;
            break;
          default:
            break;
        }
      }
    }

    _user_registration_manager_field_states($form);
  }

  if ($form_id == 'user_invited_person_form') {
    foreach ($form['#validate'] as $key => $method) {
      if ('_password_policy_user_profile_form_validate' === $method) {
        unset($form['#validate'][$key]);
      }
    }

    unset(
      $form['field_organisation']['widget']['#description'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );

    /**
     * @see email_registration_form_user_register_form_alter().
     */
    $form['account']['name']['#type'] = 'value';
    $form['account']['name']['#value'] = 'email_registration_' . user_password();

    $form['#validate'][] = '_user_registration_group_manager';

    _user_registration_manager_field_states($form);
  }

  // Make Social Login block's label translatable.
  foreach ($form as $key => $element) {
    if (strpos($key, 'social_login_social_login_providers') !== FALSE) {
      $form[$key]['#label'] = t($form[$key]['#label']);
    }
  }
}

/**
 * Implements hook_entity_extra_field_info_alter().
 */
function user_registration_entity_extra_field_info_alter(&$info) {
  $user_form = &$info['user']['user']['form'];
  $user_form['info_block'] = array(
    'label' => t('Info block'),
    'description' => t('Helper text block.'),
    'weight' => -10,
  );
  $user_form['captcha'] = array(
    'label' => t('Captcha block'),
    'description' => t('Helper captcha block.'),
    'weight' => -10,
  );
  for ($i = 1; $i <= 3; $i++) {
    $user_form['submit' . $i] = array(
      'label' => t('Submit Button ' . $i),
      'weight' => -10,
    );
  }

}

/**
 * Implements hook_element_info_alter().
 */
function user_registration_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'user_registration_form_process_password_confirm';
  }
}

function user_registration_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = ['user' => $params['account']];

  $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('user.mail');

  $token_options = ['langcode' => $langcode, 'callback' => 'user_mail_tokens', 'clear' => TRUE];
  $message['subject'] .= \Drupal\Component\Render\PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);

  $language_manager->setConfigOverrideLanguage($original_language);

}

/**
 * Form element process handler for client-side password validation.
 *
 * This #process handler is automatically invoked for 'password_confirm' form
 * elements to add the JavaScript and string translations for dynamic password
 * validation.
 */
function user_registration_form_process_password_confirm($element) {
  unset(
    $element['#attached']['drupalSettings']['password'],
    $element['pass1']['#ajax']
  );

  if ('page_manager.page_view_sign_up_confirmation' === \Drupal::routeMatch()->getRouteName()) {
    $element['pass1']['#title'] = t('New password');
    $element['pass2']['#title'] = t('Confirm new password');
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function user_registration_theme() {
  return [
    'good_to_know' => [
      'template' => 'good_to_know',
      'render element' => 'element',
    ],
    'useful_information' => [
      'template' => 'useful_information',
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_preprocess_input().
 */
function user_registration_preprocess(&$variables, $hook) {
  // TODO Not for all calls we will have $variables['attributes']['name'].
  if (isset($variables['element']['#type']) && FALSE !== strpos($variables['element']['#type'], 'pass') && isset($variables['attributes']['name'])) {
    if ($variables['attributes']['name'] == 'current_pass') {
      $variables['attributes']['placeholder'] = t('Please enter your current password');
    }
    if ('pass[pass1]' == $variables['attributes']['name']) {
      $variables['attributes']['placeholder'] = t('Please enter your password');
    }
    if ('pass[pass2]' == $variables['attributes']['name']) {
      $variables['attributes']['placeholder'] = t('Please retype your password');
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function user_registration_preprocess_block(&$variables) {
  if (isset($variables['base_plugin_id']) && $variables['base_plugin_id'] == 'user_login_block') {
    // @TODO Looks like it is core code bug. UselLoginBlock class has hard coding of destination. It is not allowed any changes on submitting alter etc.
    $redirect = new Url('<current>');
    // Redirect string will contain a current path, but without destination query.
    $variables['content']['user_login_form']['#action'] = $redirect->toString();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registration_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  $account = $form_state->getFormObject()->getEntity();

  if ($user->id() == $account->id() || $user->hasPermission('administer users')) {
    $form['account']['mail']['#type'] = 'email_confirm';
    $form['account']['mail']['#title_display'] = 'invisible';
  }
}

/**
 * Set last password reset and expiration fields on password update.
 *
 * Must run before the user entity is saved.  Otherwise the user entity will
 * not receive the updated values from the form state for last password reset
 * and password expiration fields.
 */
function _user_registration_user_profile_form_submit(array &$form, FormStateInterface $form_state) {
  $new_pass = $form_state->getValue('pass');
  $user = $form_state->getFormObject()->getEntity();

  if (!empty($user) && $new_pass) {
    $date = date('Y-m-d\TH:i:s');
    $user->set('field_last_password_reset', $date);
    $user->set('field_password_expiration', '0');
    $user->save();
  }
}

/**
 * Add states to group manager fields.
 *
 * @param array $form
 *   Form array containing the user form.
 */
function _user_registration_manager_field_states(array &$form) {
  if (isset($form['field_country_manager'])) {
    $form['field_country_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[country_managers]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[country_managers]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  if (isset($form['field_project_manager'])) {
    $form['field_project_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[projects_managers]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[projects_managers]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  if (isset($form['field_knowledge_vault_manager'])) {
    $form['field_knowledge_vault_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[knowledge_vault_manager]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[knowledge_vault_manager]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  if (isset($form['field_product_manager'])) {
    $form['field_product_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[product_manager]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[product_manager]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }
}

/**
 * Custom validate handler.
 */
function _user_registration_group_manager(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  if (!isset($values['roles'])) {
    return;
  }

  if (!in_array('country_managers', $values['roles']) && isset($values['field_country_manager'])) {
    $values['field_country_manager'][0]['entity_gids'] = [];
  }

  if (!in_array('projects_managers', $values['roles']) && isset($values['field_project_manager'])) {
    $values['field_project_manager'][0]['entity_gids'] = [];
  }

  if (!in_array('knowledge_vault_manager', $values['roles']) && isset($values['field_knowledge_vault_manager'])) {
    $values['field_knowledge_vault_manager'][0]['entity_gids'] = [];
  }

  if (!in_array('product_manager', $values['roles']) && isset($values['field_product_manager'])) {
    $values['field_product_manager'][0]['entity_gids'] = [];
  }

  if (in_array('country_managers', $values['roles']) && isset($values['field_country_manager']) && empty($values['field_country_manager'][0]['entity_gids'])) {
    $form_state->setErrorByName('field_country_manager', t('The @title value is required', ['@title' => $form['field_country_manager']['widget']['#title']]));
  }
  if (in_array('projects_managers', $values['roles']) && isset($values['field_project_manager']) && empty($values['field_project_manager'][0]['entity_gids'])) {
    $form_state->setErrorByName('field_project_manager', t('The @title value is required', ['@title' => $form['field_project_manager']['widget']['#title']]));
  }
  if (in_array('product_manager', $values['roles']) && isset($values['field_product_manager']) && empty($values['field_product_manager'][0]['entity_gids'])) {
    $form_state->setErrorByName('field_product_manager', t('The @title value is required', ['@title' => $form['field_product_manager']['widget']['#title']]));
  }
  if (in_array('knowledge_vault_manager', $values['roles']) && isset($values['field_knowledge_vault_manager']) && empty($values['field_knowledge_vault_manager'][0]['entity_gids'])) {
    $form_state->setErrorByName('field_knowledge_vault_manager', t('The @title value is required', ['@title' => $form['field_knowledge_vault_manager']['widget']['#title']]));
  }

  $form_state->setValues($values);
}
