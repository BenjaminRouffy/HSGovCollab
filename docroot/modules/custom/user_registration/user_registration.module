<?php

/**
 * @file
 * Contains user_registration.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_help().
 */
function user_registration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_registration module.
    case 'help.page.user_registration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('User Registration') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function user_registration_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_types */
  if ($entity_types['user']->getFormClass('register') == 'Drupal\user\RegisterForm') {
    $entity_types['user']->setFormClass('register', '\Drupal\user_registration\UserRegistrationRegister');
  }
  if ($entity_types['user']->getFormClass('onetime') == 'Drupal\user\ProfileForm') {
    $entity_types['user']->setFormClass('onetime', '\Drupal\user_registration\ProfileOnetimeForm');
  }
}

/**
 * Implements hook_form_alter().
 */
function user_registration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['name']['#prefix'] = '<div class="login-wrapper">';
    $form['actions']['#suffix'] = '</div>';
    unset($form['name']['#description']);
    unset($form['pass']['#description']);

    $form['actions']['submit']['#value'] = t('Submit');
    $form['user_links']['#weight'] = 9;
    $form['name']['#attributes']['placeholder'] = t('Please enter your email');
    $form['pass']['#attributes']['placeholder'] = t('Please enter your password');
    $form['actions']['#weight'] = 10;
  }
  if ($form_id == 'user_pass') {
    $form['name']['#attributes']['placeholder'] = t('Please enter your email');
    unset($form['name']['#description'], $form['mail']);
  }
  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#value'] = t('Submit');
    $form['#group_children']['actions'] = 'group_right';
    unset(
      $form['account']['mail']['#title'],
      $form['account']['notify'],
      $form['field_organisation']['widget']['#description']
    );
    $form['#group_children']['captcha'] = 'group_right';
    $title = &$form['field_accept_term_conditions']['widget']['value']['#title'];
    $title = t('Accept @link', [
      '@link' => \Drupal::l(t('term & conditions'), new Url('<front>', [], [
        '_target' => 'blank'
      ]))
    ]);
  }
  if ($form_id == 'user_onetime_form') {
    $form['actions']['submit']['#value'] = t('Understood, I am ready to start');
    $form['field_country']['widget']['#title'] = t('Select country of interest');
    $form['field_regions']['widget']['#title'] = t('Select regions of interest');
    $form['field_category']['widget']['#title'] = t('Select categories in the Knowledge Vault');
    unset(
      $form['account']['pass']['#description'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );
  }

  if (isset($form['account']['mail'])) {
    $form['account']['mail']['#type'] = 'email_confirm';
  }

  if ($form_id == 'user_form') {
    $current_user = \Drupal::currentUser();

    $form['field_mobilephone']['widget']['add_more']['#value'] = t('Add number');
    $form['field_telephone']['widget']['add_more']['#value'] = t('Add number');
    $form['field_skype_or_other']['widget']['add_more']['add_more_button_software_application']['#value'] = t('Add');
    $form['field_organisations']['widget']['add_more']['add_more_button_organisation']['#value'] = t('Add organisation');
    $form['field_organisation']['widget']['#title'] = t('Main organization');
    $form['account']['current_pass']['#weight'] = $form['account']['pass']['#weight'] -1;
    $form['account']['roles']['#weight'] = 5;
    $form['account']['status']['#weight'] = 0;

    unset(
      $form['field_skype_or_other']['widget']['text'],
      $form['field_organisations']['widget']['text'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );

    if (!$current_user->hasPermission('change main organisation')) {
      $form['field_organisation']['widget']['#disabled'] = 'disabled';
    }

    $form['#attributes']['class'][] = 'form-my-settings';
  }

  if ($form_id == 'user_invited_person_form') {
    foreach ($form['#validate'] as $key => $method) {
      if ('_password_policy_user_profile_form_validate' === $method) {
        unset($form['#validate'][$key]);
      }
    }

    unset(
      $form['field_organisation']['widget']['#description'],
      $form['account']['password_policy_status'],
      $form['account']['roles']['#ajax']
    );
  }
}

/**
 * Implements hook_entity_extra_field_info_alter().
 */
function user_registration_entity_extra_field_info_alter(&$info) {
  $user_form = &$info['user']['user']['form'];
  $user_form['info_block'] = array(
    'label' => t('Info block'),
    'description' => t('Helper text block.'),
    'weight' => -10,
  );
  $user_form['captcha'] = array(
    'label' => t('Captcha block'),
    'description' => t('Helper captcha block.'),
    'weight' => -10,
  );
  for ($i = 1; $i <= 3; $i++) {
    $user_form['submit' . $i] = array(
      'label' => t('Submit Button ' . $i),
      'weight' => -10,
    );
  }

}

/**
 * Implements hook_element_info_alter().
 */
function user_registration_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'user_registration_form_process_password_confirm';
  }
}

/**
 * Form element process handler for client-side password validation.
 *
 * This #process handler is automatically invoked for 'password_confirm' form
 * elements to add the JavaScript and string translations for dynamic password
 * validation.
 */
function user_registration_form_process_password_confirm($element) {
  unset(
    $element['#attached']['drupalSettings']['password'],
    $element['pass1']['#ajax']
  );
  return $element;
}

/**
 * Implements hook_theme().
 */
function user_registration_theme() {
  return [
    'good_to_know' => [
      'template' => 'good_to_know',
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_preprocess_input().
 */
function user_registration_preprocess(&$variables, $hook) {
  // TODO Not for all calls we will have $variables['attributes']['name'].
  if (isset($variables['element']['#type']) && FALSE !== strpos($variables['element']['#type'], 'pass') && isset($variables['attributes']['name'])) {
    if ($variables['attributes']['name'] == 'current_pass') {
      $variables['attributes']['placeholder'] = t('Please enter your current password');
    }
    if ('pass[pass1]' == $variables['attributes']['name']) {
      $variables['attributes']['placeholder'] = t('Please enter your password');
    }
    if ('pass[pass2]' == $variables['attributes']['name']) {
      $variables['attributes']['placeholder'] = t('Please retype your password');
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function user_registration_preprocess_block(&$variables) {
  if (isset($variables['base_plugin_id']) && $variables['base_plugin_id'] == 'user_login_block') {
    // @TODO Looks like it is core code bug. UselLoginBlock class has hard coding of destination. It is not allowed any changes on submitting alter etc.
    $redirect = new Url('<current>');
    // Redirect string will contain a current path, but without destination query.
    $variables['content']['user_login_form']['#action'] = $redirect->toString();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registration_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  $account = $form_state->getFormObject()->getEntity();

  if ($user->id() == $account->id() || $user->hasPermission('administer users')) {
    $form['account']['mail']['#type'] = 'email_confirm';
    $form['account']['mail']['#title_display'] = 'invisible';
  }
}

/**
 * Add states to group manager fields.
 *
 * @param array $form
 *   Form array containing the user form.
 */
function _user_registration_manager_field_states(array &$form) {
  if (isset($form['field_country_manager'])) {
    $form['field_country_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[country_managers]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[country_managers]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  if (isset($form['field_project_manager'])) {
    $form['field_project_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[projects_managers]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[projects_managers]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  if (isset($form['field_knowledge_vault_manager'])) {
    $form['field_knowledge_vault_manager']['widget'][0]['entity_gids'] += [
      '#states' => [
        'required' => [
          ':input[name="roles[knowledge_vault_manager]"]' => ['checked' => TRUE],
        ],
        'visible' => [
          ':input[name="roles[knowledge_vault_manager]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }
}
