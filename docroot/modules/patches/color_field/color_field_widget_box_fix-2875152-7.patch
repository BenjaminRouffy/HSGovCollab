diff --git a/js/color_field_widget_box.js b/js/color_field_widget_box.js
index 5839993..9abffb5 100644
--- a/js/color_field_widget_box.js
+++ b/js/color_field_widget_box.js
@@ -1,74 +1,74 @@
 /**
  * Color Field jQuery
  */
-(function ($) {
-jQuery.fn.addColorPicker = function (props) {
-  if (!props) { props = []; }
+(function ($, Drupal) {
 
-  props = jQuery.extend({
-    currentColor:'',
-    blotchElemType: 'span',
-    blotchClass:'colorBox',
-    blotchTransparentClass:'transparentBox',
-    clickCallback: function(ignoredColor) {},
-    iterationCallback: null,
-    fillString: '&nbsp;',
-    fillStringX: '?',
-    colors: [
-      '#AC725E','#D06B64','#F83A22', '#FA573C', '#FF7537', '#FFAD46',
-      '#42D692','#16A765', '#7BD148','#B3DC6C','#FBE983',
-      '#92E1C0', '#9FE1E7', '#9FC6E7', '#4986E7','#9A9CFF',
-      '#B99AFF','#C2C2C2','#CABDBF','#CCA6AC','#F691B2',
-      '#CD74E6','#A47AE2',
-    ]
-  }, props);
+  Drupal.behaviors.color_field_box = {
+    attach: function (context, settings) {
 
-  var count = props.colors.length;
-  for (var i = 0; i < count; ++i) {
-    var color = props.colors[i];
-    var elem = jQuery('<' + props.blotchElemType + '/>')
-      .addClass(props.blotchClass)
-      .attr('color',color)
-      .css('background-color',color);
-    // jq bug: chaining here fails if color is null b/c .css() returns (new String('transparent'))!
-    if (props.currentColor == color) {
-      elem.addClass('active');
-    }
-    if (props.clickCallback) {
-      elem.click(function() {
-        jQuery(this).parent().children('.' + props.blotchClass).removeClass('active');
-        jQuery(this).addClass('active');
-        props.clickCallback(jQuery(this).attr('color'));
-      });
-    }
-    this.append(elem);
-    if (props.iterationCallback) {
-      props.iterationCallback(this, elem, color, i);
-    }
-  }
+      jQuery.fn.addColorPicker = function (props) {
+        if (!props) { props = []; }
 
-  var elem = jQuery('<' + props.blotchElemType + '/>')
-    .addClass(props.blotchTransparentClass)
-    .attr('color', '')
-    .css('background-color', '');
+        props = jQuery.extend({
+          currentColor:'',
+          blotchElemType: 'span',
+          blotchClass:'colorBox',
+          blotchTransparentClass:'transparentBox',
+          clickCallback: function(ignoredColor) {},
+          iterationCallback: null,
+          fillString: '&nbsp;',
+          fillStringX: '?',
+          colors: settings.color_field.color_field_widget_box.settings.palette
+        }, props);
 
-  if (props.currentColor == '') {
-    elem.addClass('active');
-  }
+        var count = props.colors.length;
+        for (var i = 0; i < count; ++i) {
+          var color = props.colors[i];
+          var elem = jQuery('<' + props.blotchElemType + '/>')
+            .addClass(props.blotchClass)
+            .attr('color',color)
+            .css('background-color',color);
+          // jq bug: chaining here fails if color is null b/c .css() returns (new String('transparent'))!
+          if (props.currentColor == color) {
+            elem.addClass('active');
+          }
+          if (props.clickCallback) {
+            elem.click(function() {
+              jQuery(this).parent().children('span').removeClass('active');
+              jQuery(this).addClass('active');
+              props.clickCallback(jQuery(this).attr('color'));
+            });
+          }
+          this.append(elem);
+          if (props.iterationCallback) {
+            props.iterationCallback(this, elem, color, i);
+          }
+        }
 
-  if (props.clickCallback) {
-    elem.click(function() {
-      jQuery(this).parent().children('.' + props.blotchClass).removeClass('active');
-      jQuery(this).addClass('active');
-      props.clickCallback(jQuery(this).attr('color'));
-    });
-  }
-  this.append(elem);
-  if (props.iterationCallback) {
-    props.iterationCallback(this, elem, color, i);
-  }
+        // for transparent option box
+        var elem = jQuery('<' + props.blotchElemType + '/>')
+          .addClass(props.blotchTransparentClass)
+          .attr('color', '')
+          .css('background-color', '');
 
-  return this;
-};
+        if (props.currentColor == '') {
+          elem.addClass('active');
+        }
+        if (props.clickCallback) {
+          elem.click(function() {
+            jQuery(this).parent().children('span').removeClass('active');
+            jQuery(this).addClass('active');
+            props.clickCallback(jQuery(this).attr('color'));
+          });
+        }
+        this.append(elem);
+        if (props.iterationCallback) {
+          props.iterationCallback(this, elem, color, i);
+        }
+
+        return this;
+      };
+    }
+  };
 
-})(jQuery);
+})(jQuery, Drupal);
