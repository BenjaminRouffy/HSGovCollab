diff --git a/core/lib/Drupal/Core/Entity/Element/EntityAutocomplete.php b/core/lib/Drupal/Core/Entity/Element/EntityAutocomplete.php
index 9c3e705..4c62b50 100644
--- a/core/lib/Drupal/Core/Entity/Element/EntityAutocomplete.php
+++ b/core/lib/Drupal/Core/Entity/Element/EntityAutocomplete.php
@@ -294,7 +294,7 @@ protected static function matchEntityByTitle(SelectionInterface $handler, $input
       // More helpful error if there are only a few matching entities.
       $multiples = array();
       foreach ($entities as $id => $name) {
-        $multiples[] = $name . ' (' . $id . ')';
+        $multiples[] = strip_tags($name) . ' (' . $id . ')';
       }
       $params['@id'] = $id;
       $form_state->setError($element, t('Multiple entities match this reference; "%multiple". Specify the one you want by appending the id in parentheses, like "@value (@id)".', array('%multiple' => implode('", "', $multiples)) + $params));
diff --git a/core/misc/autocomplete.js b/core/misc/autocomplete.js
index 5a1c156..11f6e75 100644
--- a/core/misc/autocomplete.js
+++ b/core/misc/autocomplete.js
@@ -201,7 +201,7 @@
    */
   function renderItem(ul, item) {
     return $('<li>')
-      .append($('<a>').html(item.label))
+      .append($('<span>').html(item.label))
       .appendTo(ul);
   }
 
diff --git a/core/modules/field/src/Tests/EntityReference/Views/SelectionTest.php b/core/modules/field/src/Tests/EntityReference/Views/SelectionTest.php
index e677dbc..3368418 100644
--- a/core/modules/field/src/Tests/EntityReference/Views/SelectionTest.php
+++ b/core/modules/field/src/Tests/EntityReference/Views/SelectionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\field\Tests\EntityReference\Views;
 
+use Drupal\Component\Utility\Crypt;
+use Drupal\Core\Site\Settings;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\simpletest\WebTestBase;
 use Drupal\views\Views;
@@ -17,11 +19,18 @@ class SelectionTest extends WebTestBase {
   public static $modules = ['node', 'views', 'entity_reference_test', 'entity_test'];
 
   /**
-   * Nodes for testing.
+   * An array of node titles, keyed by content type and node ID.
    *
    * @var array
    */
-  protected $nodes = array();
+  protected $nodeTitles = [];
+
+  /**
+   * An array of node entities.
+   *
+   * @var \Drupal\node\NodeInterface[]
+   */
+  protected $nodes = [];
 
   /**
    * The entity reference field to test.
@@ -36,14 +45,17 @@ class SelectionTest extends WebTestBase {
   protected function setUp() {
     parent::setUp();
 
-    // Create nodes.
-    $type = $this->drupalCreateContentType()->id();
-    $node1 = $this->drupalCreateNode(array('type' => $type));
-    $node2 = $this->drupalCreateNode(array('type' => $type));
-    $node3 = $this->drupalCreateNode();
+    // Create content types and nodes.
+    $type1 = $this->drupalCreateContentType()->id();
+    $type2 = $this->drupalCreateContentType()->id();
+
+    $node1 = $this->drupalCreateNode(['type' => $type1, 'title' => 'Test first node']);
+    $node2 = $this->drupalCreateNode(['type' => $type1, 'title' => 'Test second node']);
+    $node3 = $this->drupalCreateNode(['type' => $type2, 'title' => 'Test third node']);
 
     foreach (array($node1, $node2, $node3) as $node) {
-      $this->nodes[$node->getType()][$node->id()] = $node->label();
+      $this->nodes[] = $node;
+      $this->nodeTitles[$node->getType()][$node->id()] = $node->label();
     }
 
     // Create a field.
@@ -77,6 +89,50 @@ protected function setUp() {
   }
 
   /**
+   * Tests that the Views selection handles the views output properly.
+   */
+  public function testAutocompleteOutput() {
+    // Reset any internal static caching.
+    \Drupal::service('entity_type.manager')->getStorage('node')->resetCache();
+
+    $view = Views::getView('test_entity_reference');
+    $view->setDisplay();
+
+    // Enable the display of the 'type' field so we can test that the output
+    // does not contain only the entity label.
+    $fields = $view->displayHandlers->get('default')->getOption('fields');
+    $fields['type']['exclude'] = FALSE;
+    $view->displayHandlers->get('default')->setOption('fields', $fields);
+    $view->save();
+
+    // Prepare the selection settings key needed by the entity reference
+    // autocomplete route.
+    $target_type = 'node';
+    $selection_handler = $this->field->getSetting('handler');
+    $selection_settings = $this->field->getSetting('handler_settings');
+    $selection_settings_key = Crypt::hmacBase64(serialize($selection_settings) . $target_type . $selection_handler, Settings::getHashSalt());
+    \Drupal::keyValue('entity_autocomplete')->set($selection_settings_key, $selection_settings);
+
+    $result = $this->drupalGetJSON('entity_reference_autocomplete/' . $target_type . '/' . $selection_handler . '/' . $selection_settings_key, ['query' => ['q' => 't']]);
+
+    $expected = [
+      0 => [
+        'value' => $this->nodes[0]->bundle() . ': ' . $this->nodes[0]->label() . ' (' . $this->nodes[0]->id() . ')',
+        'label' => '<span class="views-field views-field-type"><span class="field-content">' . $this->nodes[0]->bundle() . '</span></span>: <span class="views-field views-field-title"><span class="field-content"><a href="' . $this->nodes[0]->toUrl()->toString() . '" hreflang="en">' . $this->nodes[0]->label() . '</a></span></span>',
+      ],
+      1 => [
+        'value' => $this->nodes[1]->bundle() . ': ' . $this->nodes[1]->label() . ' (' . $this->nodes[1]->id() . ')',
+        'label' => '<span class="views-field views-field-type"><span class="field-content">' . $this->nodes[1]->bundle() . '</span></span>: <span class="views-field views-field-title"><span class="field-content"><a href="' . $this->nodes[1]->toUrl()->toString() . '" hreflang="en">' . $this->nodes[1]->label() . '</a></span></span>',
+      ],
+      2 => [
+        'value' => $this->nodes[2]->bundle() . ': ' . $this->nodes[2]->label() . ' (' . $this->nodes[2]->id() . ')',
+        'label' => '<span class="views-field views-field-type"><span class="field-content">' . $this->nodes[2]->bundle() . '</span></span>: <span class="views-field views-field-title"><span class="field-content"><a href="' . $this->nodes[2]->toUrl()->toString() . '" hreflang="en">' . $this->nodes[2]->label() . '</a></span></span>',
+      ],
+    ];
+    $this->assertEqual($result, $expected, 'The autocomplete result of the Views entity reference selection handler contains the proper output.');
+  }
+
+  /**
    * Confirm the expected results are returned.
    *
    * @param array $result
@@ -86,7 +142,7 @@ protected function assertResults(array $result) {
     $success = FALSE;
     foreach ($result as $node_type => $values) {
       foreach ($values as $nid => $label) {
-        if (!$success = $this->nodes[$node_type][$nid] == trim(strip_tags($label))) {
+        if (!$success = $this->nodeTitles[$node_type][$nid] == trim(strip_tags($label))) {
           // There was some error, so break.
           break;
         }
diff --git a/core/modules/system/tests/modules/entity_reference_test/config/install/views.view.test_entity_reference.yml b/core/modules/system/tests/modules/entity_reference_test/config/install/views.view.test_entity_reference.yml
index 3e78c51..c2b7e48 100644
--- a/core/modules/system/tests/modules/entity_reference_test/config/install/views.view.test_entity_reference.yml
+++ b/core/modules/system/tests/modules/entity_reference_test/config/install/views.view.test_entity_reference.yml
@@ -2,12 +2,11 @@ langcode: en
 status: true
 dependencies:
   module:
-    - entity_reference_test
     - node
     - user
 id: test_entity_reference
 label: 'Entity reference'
-module: entity_reference_test
+module: views
 description: ''
 tag: ''
 base_table: node_field_data
@@ -35,6 +34,71 @@ display:
       row:
         type: fields
       fields:
+        type:
+          id: type
+          table: node_field_data
+          field: type
+          relationship: none
+          group_type: group
+          admin_label: ''
+          label: ''
+          exclude: true
+          alter:
+            alter_text: false
+            text: ''
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: true
+            ellipsis: true
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          click_sort_column: target_id
+          type: entity_reference_label
+          settings:
+            link: false
+          group_column: target_id
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+          entity_type: node
+          entity_field: type
+          plugin_id: field
         title:
           id: title
           table: node_field_data
@@ -99,14 +163,30 @@ display:
           entity_type: node
           entity_field: status
       sorts:
-        created:
-          id: created
+        nid:
+          id: nid
           table: node_field_data
-          field: created
-          order: DESC
-          plugin_id: date
+          field: nid
+          relationship: none
+          group_type: group
+          admin_label: ''
+          order: ASC
+          exposed: false
+          expose:
+            label: ''
           entity_type: node
-          entity_field: created
+          entity_field: nid
+          plugin_id: standard
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
   entity_reference_1:
     display_plugin: entity_reference
     id: entity_reference_1
@@ -123,3 +203,19 @@ display:
         type: none
         options:
           offset: 0
+      display_extenders: {  }
+      row:
+        type: entity_reference
+        options:
+          default_field_elements: true
+          inline: {  }
+          separator: ': '
+          hide_empty: false
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
diff --git a/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php b/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
index db19052..b328137 100644
--- a/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
+++ b/core/modules/views/src/Plugin/EntityReferenceSelection/ViewsSelection.php
@@ -9,6 +9,7 @@
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\views\Views;
@@ -48,6 +49,13 @@ class ViewsSelection extends PluginBase implements SelectionInterface, Container
   protected $currentUser;
 
   /**
+   * The renderer.
+   *
+   * @var \Drupal\Core\Render\RendererInterface
+   */
+  protected $renderer;
+
+  /**
    * Constructs a new SelectionBase object.
    *
    * @param array $configuration
@@ -62,13 +70,16 @@ class ViewsSelection extends PluginBase implements SelectionInterface, Container
    *   The module handler service.
    * @param \Drupal\Core\Session\AccountInterface $current_user
    *   The current user.
+   * @param \Drupal\Core\Render\RendererInterface $renderer
+   *   The current renderer service.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, RendererInterface $renderer) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->entityManager = $entity_manager;
     $this->moduleHandler = $module_handler;
     $this->currentUser = $current_user;
+    $this->renderer = $renderer;
   }
 
   /**
@@ -81,7 +92,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_definition,
       $container->get('entity.manager'),
       $container->get('module_handler'),
-      $container->get('current_user')
+      $container->get('current_user'),
+      $container->get('renderer')
     );
   }
 
@@ -222,9 +234,9 @@ public function getReferenceableEntities($match = NULL, $match_operator = 'CONTA
 
     $return = array();
     if ($result) {
-      foreach ($this->view->result as $row) {
-        $entity = $row->_entity;
-        $return[$entity->bundle()][$entity->id()] = $entity->label();
+      foreach ($result as $id => $row) {
+        $entity = $row['#row']->_entity;
+        $return[$entity->bundle()][$id] = $this->renderer->renderPlain($row);
       }
     }
     return $return;
