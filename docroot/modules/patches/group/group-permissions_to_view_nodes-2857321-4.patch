diff --git a/modules/gnode/gnode.module b/modules/gnode/gnode.module
index d184243..ddc146d 100644
--- a/modules/gnode/gnode.module
+++ b/modules/gnode/gnode.module
@@ -208,10 +208,10 @@ function gnode_node_grants(AccountInterface $account, $op) {
       switch ($op) {
         case 'view':
           if ($group_role->hasPermission("view $plugin_id entity")) {
-            $grants_ao["gnode:$node_type_id"] = $gids;
+            $grants_ao["gnode:$node_type_id"][] = $gids;
           }
           elseif ($group_role->hasPermission("view unpublished $plugin_id entity")) {
-            $grants_ao["gnode_unpublished:$node_type_id"] = $gids;
+            $grants_ao["gnode_unpublished:$node_type_id"][] = $gids;
           }
           break;

@@ -219,17 +219,22 @@ function gnode_node_grants(AccountInterface $account, $op) {
         case 'delete':
           // If you can act on any node, there's no need for the author grant.
           if ($group_role->hasPermission("$op any $plugin_id entity")) {
-            $grants_ao["gnode:$node_type_id"] = $gids;
+            $grants_ao["gnode:$node_type_id"][] = $gids;
           }
           elseif ($group_role->hasPermission("$op own $plugin_id entity")) {
             $uid = $account->id();
-            $grants_ao["gnode_author:$uid:$node_type_id"] = $gids;
+            $grants_ao["gnode_author:$uid:$node_type_id"][] = $gids;
           }
           break;
       }
     }
   }

+  // Merge grant by group type.
+  foreach ($grants_ao as $key => $grant) {
+    $grants_ao[$key] = array_reduce($grant, 'array_merge', []);
+  }
+
   // Recursively merge the member grants with the anonymous/outsider grants.
   return array_merge_recursive($grants_m, $grants_ao);
 }
