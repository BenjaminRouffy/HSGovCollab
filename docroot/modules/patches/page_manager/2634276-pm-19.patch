diff --git a/src/Routing/VariantRouteFilter.php b/src/Routing/VariantRouteFilter.php
index 6d2abcc..207b5a3 100644
--- a/src/Routing/VariantRouteFilter.php
+++ b/src/Routing/VariantRouteFilter.php
@@ -121,6 +121,15 @@ public function filter(RouteCollection $collection, Request $request) {
       }
     }
 
+    // Iterate over the routes, using the base_route_name if one is specified.
+    // All routes must be removed and re-added to the collection to ensure the
+    // original order is kept.
+    foreach ($collection as $route_name => $route_item) {
+      $base_route_name = $route_item->getDefault('base_route_name') ?: $route_name;
+      $collection->remove($route_name);
+      $collection->add($base_route_name, $route_item);
+    }
+
     return $collection;
   }
 
diff --git a/tests/src/Unit/VariantRouteFilterTest.php b/tests/src/Unit/VariantRouteFilterTest.php
index dbcf0f3..91e2e0a 100644
--- a/tests/src/Unit/VariantRouteFilterTest.php
+++ b/tests/src/Unit/VariantRouteFilterTest.php
@@ -341,6 +341,38 @@ public function testFilterRequestAttributes() {
   }
 
   /**
+   * @covers ::filter
+   */
+  public function testFilterPreservingBaseRouteName() {
+    $route_collection = new RouteCollection();
+    $request = new Request();
+
+    // Add routes in different order to also test order preserving
+    $route1 = new Route('/path/with/{slug}', ['page_manager_page_variant' => 'variant1', 'base_route_name' => 'preserved_route_name']);
+    $route2 = new Route('/path/with/{slug}', ['page_manager_page_variant' => 'variant2']);
+    $route3 = new Route('/path/with/{slug}', []);
+    $route4 = new Route('/path/with/{slug}', []);
+    $route_collection->add('route_4', $route4);
+    $route_collection->add('route_3', $route3);
+    $route_collection->add('route_1', $route1);
+    $route_collection->add('route_2', $route2);
+
+    $page_variant1 = $this->prophesize(PageVariantInterface::class);
+    $page_variant1->access('view')->willReturn(TRUE);
+    $page_variant2 = $this->prophesize(PageVariantInterface::class);
+    $page_variant2->access('view')->willReturn(FALSE);
+
+    $this->currentPath->getPath($request)->willReturn('');
+    $this->pageVariantStorage->load('variant1')->willReturn($page_variant1->reveal())->shouldBeCalled();
+    $this->pageVariantStorage->load('variant2')->willReturn($page_variant2->reveal())->shouldBeCalled();
+
+    $result = $this->routeFilter->filter($route_collection, $request);
+
+    $expected = ['preserved_route_name' => $route1, 'route_4' => $route4, 'route_3' => $route3];
+    $this->assertSame($expected, $result->all());
+  }
+
+  /**
    * @covers ::getRequestAttributes
    */
   public function testGetRequestAttributes() {
