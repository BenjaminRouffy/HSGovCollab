<?php

/**
 * @file
 * ample.theme
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;
use Drupal\block_content\Entity\BlockContentType;
use Drupal\file\Entity\File;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupType;
use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;

/**
 * Additional settings for ample setting form.
 */
function ample_form_system_theme_settings_alter(array &$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }
  $form['logo']['default_logo']['#disabled'] = TRUE;

}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_html(array &$variables) {
  // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  $route_name = explode('.', $route_name);
  $route_prefix = current($route_name);

  if ('page_manager' === $route_prefix) {
    $page_name = end($route_name);
    // Remove "page_view_".
    $variables['attributes']['class'][] = 'page-' . str_replace('_', '-', substr($page_name, 10));
  }
  elseif ('group' === $route_prefix) {
    $variables['attributes']['class'][] = 'page-' . $route_prefix . '-' . str_replace('_', '-', end($route_name));
  }
  elseif ('entity' === $route_prefix) {
    $variables['attributes']['class'][] = 'page-' . next($route_name) . '-' . str_replace('_', '-', end($route_name));
  }

  if ('node' === $variables['root_path'] && isset($variables['node_type'])) {
    $variables['attributes']['class'][] = 'node-' . str_replace('_', '-', $variables['node_type']);
  }

  $variables['attributes']['class'][] = strtolower(\Drupal::languageManager()->getCurrentLanguage()->getId());
  $variables['attributes']['class'][] = \Drupal::theme()->getActiveTheme()->getName();
}

/**
 * Implements hook_preprocess_mimemail_messages().
 */
function ample_preprocess_mimemail_messages(array &$variables) {
  global $base_url;

  $variables['site_base_url'] = $base_url;
}

/**
 * Implements hook_css_alter().
 */
function ample_css_alter(&$css, AttachedAssetsInterface $assets) {
  // Remove views_data_export.css file.
  unset($css[drupal_get_path('module', 'views_data_export') . '/css/views_data_export.css']);
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function ample_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'block' && $variables['elements']['#base_plugin_id'] == 'block_content') {
    $element = $variables['elements'];

    if (isset($element['content']['#block_content'])) {
      /* @var BlockContent $block_content */
      $block_content = $element['content']['#block_content'];

      $suggestions[] = 'block__block_content__' . $block_content->bundle();
      $suggestions[] = 'block__block_content__' . $block_content->bundle() . '__' . $element['content']['#view_mode'];
    }
  }

  /* @var ViewExecutable $view */
  if (
    (strpos($hook, 'views_') !== FALSE) &&
    (isset($variables['view'])) &&
    ($view = $variables['view']) &&
    (!empty($view->storage))
  ) {
    $suggestions[] = "{$hook}__" . $view->storage->id();
    if (!empty($view->current_display)) {
      $suggestions[] = "{$hook}__" . $view->storage->id() . '__' . $view->current_display;

      if (isset($variables['field'])) {
        $suggestions[] = "{$hook}__" . $view->storage->id() . '__' . $view->current_display . '__' . $variables['field']->field;
      }
    }
  }
  elseif ($variables['theme_hook_original'] == 'field') {
    $suggestions[] = "{$hook}__{$variables['element']['#entity_type']}__{$variables['element']['#field_name']}__{$variables['element']['#bundle']}__{$variables['element']['#view_mode']}";
  }

  if ($hook == 'taxonomy_term') {
    /* @var Term $term  */
    $term = $variables['elements']['#taxonomy_term'];
    $suggestions[] = "{$hook}__{$term->bundle()}__{$variables['elements']['#view_mode']}";
  }

  if ($hook == 'user') {
    /* @var Term $term  */
    $term = $variables['elements']['#user'];
    $suggestions[] = "{$hook}__{$term->bundle()}__{$variables['elements']['#view_mode']}";
  }

  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];

    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#form_id']);
  }

  if ($hook == 'page') {
    $node = \Drupal::routeMatch()->getParameter('node');

    if (!empty($node)) {
      $path_args = explode('/', trim(\Drupal::service('path.current')->getPath(), '/'));
      $path_args[] = $node->bundle();

      $suggestions = theme_get_suggestions($path_args, 'page');
    }
  }

  if ($hook == 'comment') {
    $suggestions[] = "{$hook}__{$variables['elements']['#view_mode']}";
  }
}

/**
 * Implements hook_preprocess_node().
 */
function ample_preprocess_node(array &$variables) {
  /* @var Node $node */
  $node = $variables['node'];

  if (in_array($node->bundle(), ['news', 'event', 'document'])) {
    $user = \Drupal::currentUser();
    $update_access = gnode_node_access($node, 'update', $user);
    $update_access = $update_access->isAllowed() || $update_access->isNeutral() ? TRUE : FALSE;

    $delete_access = gnode_node_access($node, 'delete', $user);
    $delete_access = $delete_access->isAllowed() || $delete_access->isNeutral() ? TRUE : FALSE;

    $variables['contextual_link_access'] = $update_access || $delete_access;
  }

  if ('event' == $node->bundle()) {
    $variables['is_conference'] = isset($node->field_is_conference->value) ? $node->field_is_conference->value : 0;
    $variables['hide_times'] = isset($node->field_hide_times->value) ? $node->field_hide_times->value : 0;
  }

  if ($node->bundle() == 'voices') {
    $variables['node_date'] = date('d M Y', $variables['node']->changed->value);
  }
}

/**
 * Implements hook_preprocess_group().
 */
function ample_preprocess_group(array &$variables) {
  $group = $variables['group'];

  if (in_array($variables['view_mode'], ['default', 'banner'])) {
    if ('default' === $variables['view_mode']) {
      /* @var Group $group */
      $group_type = GroupType::load($group->bundle());
      if (!$group_type->getThirdPartySetting('group_dashboard', 'hide_follow_button', 0)) {
        $variables['following_form'] = \Drupal::formBuilder()
          ->getForm('Drupal\group_following\Form\GroupJoinBlockForm', $group);
      }
    }
    /**
     * @var \Drupal\country\CountryCollapsibleService $collapsed_group
     */
    $collapsed_group = \Drupal::service('country.collapsible_display_mode');
    if (isset($variables['group'])) {
      $group = $variables['group'];
      if ($group instanceof GroupInterface) {
        $variables['attributes']['class'][] = 'group-collapsible';
        $variables['attributes']['class'][] = $collapsed_group->isCollapsedText($group->id());
        $variables['attributes']['data-group-collapsible'] = $group->id();
      }
    }
  }

  $country_icon_uri = ample_get_country_icon_by_group($group);

  if (!empty($country_icon_uri)) {
    $variables['group_icon'] = $country_icon_uri;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function ample_preprocess_field(array &$variables) {
  switch ($variables['field_name']) {
    case 'field_event_file':
      if (!empty($variables['items'])
        && !empty($variables['items'][0])
        && !empty($variables['items'][0]['content'])) {
        $file = $variables['items'][0]['content']['#file'];
        $variables['document_type'] = file_icon_class($file->getMimeType());
        $variables['file_name'] = $file->getFilename();
        $variables['file_url'] = file_create_url($file->getFileUri());
      }
      break;
    case 'field_video_link':
      foreach ($variables['items'] as $i => $item) {
        $variables['items'][$i]['content']['children']['#attributes']['data-type'] = $item['content']['children']['#provider'];
      }

      $variables['#attached']['library'][] = 'ample/plyr';
      break;

    case 'field_comments':
      // Check comments static count.
      $node = $variables['element']['#object'];
      if ($variables['element']['#items']->status != CommentItemInterface::CLOSED
        && $variables['element']['#items']->status != CommentItemInterface::HIDDEN
      ) {
        $variables['comment_status'] = TRUE;
        $variables['comment_count'] = $node->get('field_comments')->comment_count;
        // Add link for anonymous user.
        if ($variables['user']->isAnonymous()) {
          $variables['comment_forbidden'] = new TranslatableMarkup(
            "For adding comments please <a href='@register'>sign up</a> or <a href='@login'>log in</a>",
            [
              '@login' => Url::fromRoute('page_manager.page_view_user_login')->toString(),
              '@register' => Url::fromRoute('page_manager.page_view_sign_up')->toString(),
            ]
          );
        }
      }
      // Check children comments count.
      $parents = [];
      foreach ($variables['items'] as $i => $item) {
        foreach ($variables['items'][$i]['content']['comments'] as $key => $comment) {
          if (is_numeric($key)) {
            $variables['items'][$i]['content']['comments'][$key]['#cid'] = $comment['#comment']->id();
            $variables['items'][$i]['content']['comments'][$key]['#is_parent'] = TRUE;

            if ($comment['#comment']->getParentComment()) {
              $parents[$comment['#comment']->getParentComment()
                ->id()][] = $comment['#comment']->id();
              $variables['items'][$i]['content']['comments'][$key]['#is_parent'] = FALSE;
            }
          }
        }

        foreach ($parents as $parent_id => $children) {
          foreach ($variables['items'][$i]['content']['comments'] as $key => $comment) {
            if (is_numeric($key)) {
              if ($parent_id == $variables['items'][$i]['content']['comments'][$key]['#cid']
                && $variables['items'][$i]['content']['comments'][$key]['#is_parent']
              ) {
                if (count($children) > 2) {
                  $variables['items'][$i]['content']['comments'][$key]['#replies_count'] = TRUE;
                }
              }
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ample_preprocess_paragraph(array &$variables) {
  /* @var Paragraph $variables['paragraph'] */
  $variables['paragraph'] = $variables['elements']['#paragraph'];

  if (
    in_array($variables['paragraph']->bundle(), ['slider', 'content_image']) &&
    'country' === $variables['view_mode']
  ) {
    /* @var Group $entity */
    $entity = $variables['paragraph']->getParentEntity();

    if ('group' === $entity->getEntityTypeId()) {
      $variables['group_label'] = \Drupal::entityManager()
        ->getTranslationFromContext($entity)
        ->label();

      $variables['group_bundle'] = $entity->bundle();

      $group_type = GroupType::load($variables['group_bundle']);

      if (!$group_type->getThirdPartySetting('group_dashboard', 'hide_follow_button', 0)) {
        $variables['following_form'] = \Drupal::formBuilder()
          ->getForm('Drupal\group_following\Form\GroupJoinBlockForm', $entity);
      }
    }

    $group_icon_uri = ample_get_country_icon_by_group($entity);
    if (!empty($group_icon_uri)) {
      $variables['group_icon'] = $group_icon_uri;
    }
  }

  if ($variables['paragraph']->hasField('field_private_content')) {
    $private = $variables['paragraph']->get('field_private_content')->getValue();

    if (is_array($private)) {
      $user = \Drupal::currentUser();

      if (!empty(reset($private)['value']) && !$user->hasPermission('view private content')) {
        $variables['private_content'] = TRUE;
      }
    }
  }

  if ($variables['paragraph']->bundle() === 'file' && 'default' === $variables['view_mode'] && isset($variables['content']['field_file'][0])) {
    $variables['document_type'] = file_icon_class($variables['content']['field_file'][0]['#file']->getMimeType());
  }

  if ($variables['paragraph']->bundle() === 'link_to_file') {
    $link = $variables['paragraph']->field_link[0]->getUrl()->getUri();
    $parse = parse_url($link);

    if (strpos($parse['host'], 'google') !== FALSE) {
      $variables['document_type'] = 'google';
    }
    elseif (strpos($parse['host'], 'intellectait') !== FALSE) {
      $variables['document_type'] = 'onedrive';
    }
  }

  if ($variables['paragraph']->bundle() === 'exist_content' || $variables['paragraph']->bundle() === 'country_and_project') {
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    foreach ($variables['content'] as $content_key => $content_item) {
      // @TODO @see TimeLineItemBehavior.php it should be researched and fixed.
      $paragraph_entity_field = $variables['paragraph']->{$content_key};

      if (isset($content_item['#field_type']) &&
        $content_item['#field_type'] == 'entity_reference' &&
        $content_item['#language'] != $current_language &&
        !empty($paragraph_entity_field->referencedEntities())
      ) {
        $entity_keys = Element::children($content_item);
        $entity_type_id = $paragraph_entity_field->entity->getEntityTypeId();

        foreach ($entity_keys as $entity_key) {
          if ($content_item[$entity_key]['#' . $entity_type_id]->hasTranslation($current_language)) {
            $variables['content'][$content_key][$entity_key]['#' . $entity_type_id] = $content_item[$entity_key]['#' . $entity_type_id]->getTranslation($current_language);
          }
        }
      }
    }
  }

  if ($variables['paragraph']->bundle() === 'pin_item') {
    $link = $variables['paragraph']->get('field_link')->getValue();
    $variables['is_external'] = FALSE;
    if (!empty($link)) {
      $is_external = UrlHelper::isExternal($variables['paragraph']->field_link->uri);
      $variables['is_external'] = $is_external;
    }
  }

  if ($variables['paragraph']->bundle() == 'image_with_text') {
    $variables['image_alignment'] = $variables['content']['field_image_alignment']['0']['#markup'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_links(array &$variables) {
  if ($variables['theme_hook_original'] === 'links__language_block') {
    // According to the design, we need to change the links of the navigation block
    // to the two characters instead of the language name.
    foreach ($variables['links'] as $key => $language) {
      $variables['links'][$key]['link']['#title'] = substr($language['link']['#title'], 0, 2);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_field_multiple_value_form(array &$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_organisations':
    case 'field_mobilephone':
    case 'field_telephone':
    case 'field_skype_or_other':
      $variables['table']['#tabledrag'] = [];

      // Unset Order column.
      array_pop($variables['table']['#header']);

      foreach ($variables['table']['#rows'] as $index => $row) {
        array_pop($variables['table']['#rows'][$index]['data']);
      }
      break;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function ample_preprocess_menu(&$variables, $hook) {
  // Moved to template and added tag context
  // @see ample_preprocess_block()
  // https://www.drupal.org/node/2576827#comment-11182953
}

/**
 * Implements hook_preprocess_block().
 */
function ample_preprocess_block(&$variables) {
  // Additional process for Custom block type.
  switch ($variables['base_plugin_id']) {
    case 'block_content':
      // In case a BlockContent defined/available.
      if (isset($variables['content']) && isset($variables['content']['#block_content'])) {
        $content = &$variables['content'];
        $block_content = &$content['#block_content'];
        if ($block_content->hasField('field_is_non_public')) {
          $variables['is_non_public'] = isset($block_content->field_is_non_public->value) ? $block_content->field_is_non_public->value : 0;
        }
        // Designed to invalidate cache on content of block was modified.
        // Add a "block_content:<entity_id>" cache tag.
        $variables['#cache']['tags'] = $block_content->getCacheTags();
      }
      break;
  }
  if ($variables['base_plugin_id'] == 'system_menu_block'
    && $variables['derivative_plugin_id'] == 'header-dashboard-menu') {
    // @TODO Create custom context of GA followed user (https://www.drupal.org/docs/8/api/cache-api/cache-contexts)
    // @TODO Research why a _custom_access route don't add context to this block.
    $variables['#cache']['contexts'][] = 'user';
    $variables['#cache']['contexts'][] = 'route.menu_active_trails:menu_name';
  }

  if ($variables['base_plugin_id'] == 'views_block'
    && $variables['derivative_plugin_id'] == 'blog_lists-block_author_posts') {
      $node = \Drupal::routeMatch()->getParameter('node');
      $node_id = $node->id();

      $authors = $node->field_authors->getValue();

      if (empty($authors)) {
        $variables['content'] = [];
      }
  }
}

/**
 * Implements hook_preprocess_blocktabs().
 */
function ample_preprocess_blocktabs(&$variables) {
  foreach ($variables['tabs'] as $id => $tab) {
    $variables['tabs'][$id]->title = t($variables['tabs'][$id]->title);
  }
}

/**
 * Implements template_preprocess_comment().
 */
function ample_preprocess_comment(&$variables) {
  // Set comment created date interval.
  $date = $variables['comment']->getCreatedTime();
  $current_date = \Drupal::time()->getRequestTime();

  if ('teaser' == $variables['elements']['#view_mode']) {
    $variables['created'] = \Drupal::service('date.formatter')->format($date, 'p4h_time_and_date');
  }
  else {
    $variables['created'] = \Drupal::service('date.formatter')->formatInterval($current_date - $date);
  }
  $variables['submitted'] = t('@datetime', ['@datetime' => $variables['created']]);
  // Rewrite {{ user_picture }} variable.
  $comment = $variables['elements']['#comment'];
  $account = $comment->getOwner();
  $variables['user_picture'] = user_view($account, 'comment_author');

  $first_name = '';
  $last_name = '';

  if (!empty($account->get('field_first_name'))) {
    $first_name = $account->get('field_first_name')->value;
  }

  if (!empty($account->get('field_last_name'))) {
    $last_name = $account->get('field_last_name')->value;
  }

  $variables['author_name'] = $first_name . ' ' . $last_name;
  $variables['author_url'] = $account->url();
}

/**
 * Implements template_preprocess_container().
 */
function ample_preprocess_container(array &$variables) {
  if (
    isset($variables['element']['#type']) &&
    'view' == $variables['element']['#type'] &&
    isset($variables['element']['#name']) &&
    ('last_news_by_group' == $variables['element']['#name'] ||
     'last_news_by_closed_group' == $variables['element']['#name'] ||
     'cd_user_view' == $variables['element']['#name']
    )
  ) {
    $variables['without_div'] = TRUE;
  }
}

/**
 * Implements template_preprocess_input().
 */
function ample_preprocess_input(array &$variables) {
  // Set placeholders translatable.
  if (isset($variables['attributes']['placeholder']) && !($variables['attributes']['placeholder'] instanceof TranslatableMarkup)) {
    $variables['attributes']['placeholder'] = new TranslatableMarkup($variables['attributes']['placeholder']);
  }
}

/**
 * Implements template_preprocess_item_list().
 */
function ample_preprocess_item_list(&$variables) {

  if (!empty($variables['attributes']['class']) && in_array('content-tags-cloud', $variables['attributes']['class'])) {
    $reset_link = Url::fromRoute('page_manager.page_view_blog_list_page')->toString();
    $reset_item = [
      'value' => [
        '#type' => "html_tag",
        '#tag' => "span",
        "#attributes" => [],
        '#value' => '<a href="' . $reset_link . '">All</a>'
      ]
    ];
    array_unshift($variables['items'], $reset_item);
  }
}

/**
 * Implements template_preprocess_simplenews_newsletter_body().
 */
function ample_preprocess_simplenews_newsletter_body(array &$variables) {
  /* Block member icon */
  $block = BlockContentType::load('member_icons')->getThirdPartySetting('simplenews_customizations', 'simplenews_footer', 0);
  $block = BlockContent::load($block);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');

  if (!empty($block)) {
    $variables['icons'] = $view_builder->view($block, 'simplenews');
  }
}

/**
 * Function that gets the group icon for a country group.
 *
 * @param $entity
 * @return string Returns the country icon uri.
 */
function ample_get_country_icon_by_group($entity) {
  $group_icon_uri = '';

  // If the passed entity is not a group entity and
  // not a country group return empty string.
  if ($entity->getEntityTypeId() !== 'group' &&
      ( $entity->bundle() !== 'country' ||
        $entity->bundle() !== 'country_protected'
      )
  ) {
    return $group_icon_uri;
  }

  // If the group has the geographical object field.
  if ($entity->hasField('field_geographical_object')) {
    $geo_object = (int) $entity->get('field_geographical_object')->getString();

    if ($entity->hasField('field_country_icon')) {
      $icon = $entity->get('field_country_icon')->getValue();

      // If it is a geographical object then get the region icon.
      if ($geo_object && is_array($icon) && !empty($icon)) {
        $icon = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($icon[0]['target_id']);

        if ($icon->hasField('field_icon')) {
          $icon = $icon->get('field_icon')->getValue();

          if (is_array($icon) && !empty($icon)) {
            $image = File::load($icon[0]['target_id']);
            $group_icon_uri = $image->getFileUri();
          }
        }
      }
    }

    if ($entity->hasField('field_region_icon')) {
      $icon = $entity->get('field_region_icon')->getValue();

      // If it is not a geographical object then get the region icon.
      if (!$geo_object && is_array($icon) && !empty($icon)) {
        $image = File::load($icon[0]['target_id']);
        $group_icon_uri = $image->getFileUri();
      }
    }
  }
  else {
    if ($entity->hasField('field_region_icon')) {
      $icon = $entity->get('field_region_icon')->getValue();

      // If it is not a geographical object then get the region icon.
      if (is_array($icon) && !empty($icon)) {
        $image = File::load($icon[0]['target_id']);
        $group_icon_uri = $image->getFileUri();
      }
    }
  }

  // If we are on the region or closed region page we get the default objects
  // icon from it, otherwise if we are on the country or country_protected page
  // we get the icon from its first parent group.
  if (empty($group_icon_uri)) {
    $parent_group = Drupal::routeMatch()->getParameter('group');
    if (!empty($parent_group) && ($parent_group->getGroupType()
          ->id() === 'region' || $parent_group->getGroupType()
          ->id() === 'region_protected')
    ) {
      if ($parent_group->hasField('field_objects_icon')) {
        $icon = $parent_group->get('field_objects_icon')->getValue();

        // If it is not a geographical object then get the region icon.
        if (is_array($icon) && !empty($icon[0]['target_id'])) {
          $image = File::load($icon[0]['target_id']);
          $group_icon_uri = $image->getFileUri();
        }
      }
    }
    elseif ($entity->getGroupType()->id() === 'country' || $entity->getGroupType()->id() === 'country_protected') {
      $manager = \Drupal::service('ggroup.group_hierarchy_manager');

      $groups = $manager->getGroupSupergroups($entity->id());
      // @TODO: We get the objects icon from the first parent group. It should
      // @TODO: be fixed. One way is to disable the relate functionality for
      // @TODO: groups.
      if (!empty($groups)) {
        $first_group = reset($groups);

        if ($first_group->hasField('field_objects_icon')) {
          $icon = $first_group->get('field_objects_icon')->getValue();

          // If it is not a geographical object then get the region icon.
          if (is_array($icon) && !empty($icon[0]['target_id'])) {
            $image = File::load($icon[0]['target_id']);
            $group_icon_uri = $image->getFileUri();
          }
        }
      }
    }
  }

  return $group_icon_uri;
}

/**
 * @param $variables
 */
function ample_preprocess_input__date(&$variables) {
  if (!empty($variables['attributes'])) {
    if (isset($variables['attributes']['type']) && $variables['attributes']['type'] === 'time') {
      if (isset($variables['attributes']['step'])) {
        // Remove the step attribute from time select widget.
        unset($variables['attributes']['step']);
      }
    }
  }
}

/**
 * @param $variables
 */
function ample_preprocess_file_upload_help(&$variables) {
  if (!empty($variables['description'])) {
    // If there is help text set in the field settings don't display
    // hardcoded settings string in the template.
    $variables['hide_hardcoded_string'] = TRUE;
  }
}
