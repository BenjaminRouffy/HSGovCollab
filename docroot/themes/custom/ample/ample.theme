<?php

/**
 * @file
 * ample.theme
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteProvider;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use \Drupal\paragraphs\Entity\Paragraph;
use \Drupal\group\Entity\Group;
use Drupal\views\ViewExecutable;

/**
 * Additional settings for ample setting form.
 */
function ample_form_system_theme_settings_alter(array &$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }
  $form['logo']['default_logo']['#disabled'] = TRUE;

}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_html(array &$variables) {
  // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

  $variables['attributes']['class'][] = strtolower(\Drupal::languageManager()->getCurrentLanguage()->getId());
  $variables['attributes']['class'][] = \Drupal::theme()->getActiveTheme()->getName();
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function ample_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'block' && $variables['elements']['#base_plugin_id'] == 'block_content') {
    $element = $variables['elements'];

    if (isset($element['content']['#block_content'])) {
      /* @var BlockContent $block_content */
      $block_content = $element['content']['#block_content'];

      $suggestions[] = 'block__block_content__' . $block_content->bundle();
      $suggestions[] = 'block__block_content__' . $block_content->bundle() . '__' . $element['content']['#view_mode'];
    }
  }

  /* @var ViewExecutable $view */
  if (
    (strpos($hook, 'views_') !== FALSE) &&
    (isset($variables['view'])) &&
    ($view = $variables['view']) &&
    (!empty($view->storage))
  ) {
    $suggestions[] = "{$hook}__" . $view->storage->id();
    if (!empty($view->current_display)) {
      $suggestions[] = "{$hook}__" . $view->storage->id() . '__' . $view->current_display;

      if (isset($variables['field'])) {
        $suggestions[] = "{$hook}__" . $view->storage->id() . '__' . $view->current_display . '__' . $variables['field']->field;
      }
    }
  }
  elseif ($variables['theme_hook_original'] == 'field') {
    $suggestions[] = "{$hook}__{$variables['element']['#entity_type']}__{$variables['element']['#field_name']}__{$variables['element']['#bundle']}__{$variables['element']['#view_mode']}";
  }


  if ($hook == 'taxonomy_term') {
    /* @var Term $term  */
    $term = $variables['elements']['#taxonomy_term'];
    $suggestions[] = "{$hook}__{$term->bundle()}__{$variables['elements']['#view_mode']}";
  }

  if ($hook == 'user') {
    /* @var Term $term  */
    $term = $variables['elements']['#user'];
    $suggestions[] = "{$hook}__{$term->bundle()}__{$variables['elements']['#view_mode']}";
  }

  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];

    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#form_id']);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function ample_preprocess_node(array &$variables) {
  /* @var Node $node */
  $node = $variables['node'];

  if (in_array($node->bundle(), ['news', 'event', 'document'])) {
    $user = \Drupal::currentUser();
    $update_access = gnode_node_access($node, 'update', $user);
    $update_access = $update_access->isAllowed() || $update_access->isNeutral() ? TRUE : FALSE;

    $delete_access = gnode_node_access($node, 'delete', $user);
    $delete_access = $delete_access->isAllowed() || $delete_access->isNeutral() ? TRUE : FALSE;

    $variables['contextual_link_access'] = $update_access || $delete_access;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function ample_preprocess_field(array &$variables) {
  switch ($variables['field_name']) {
    case 'field_video_link':
      foreach ($variables['items'] as $i => $item) {
        $variables['items'][$i]['content']['children']['#attributes']['data-type'] = $item['content']['children']['#provider'];
      }

      $variables['#attached']['library'][] = 'ample/plyr';
      break;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ample_preprocess_paragraph(array &$variables) {
  /* @var Paragraph $variables['paragraph'] */
  $variables['paragraph'] = $variables['elements']['#paragraph'];

  if (
    in_array($variables['paragraph']->bundle(), ['slider', 'content_image']) &&
    'country' === $variables['view_mode']
  ) {
    /* @var Group $entity */
    $entity = $variables['paragraph']->getParentEntity();

    if ('group' === $entity->getEntityTypeId()) {
      $variables['group_label'] = $entity->label();
    }

    if ($entity->hasField('field_country_icon')) {
      $icon = $entity->get('field_country_icon')->getValue();

      if (is_array($icon) && !empty($icon)) {
        $icon = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($icon[0]['target_id']);
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder($icon->getEntityTypeId());

        $variables['country_icon'] = $view_builder->view($icon, 'default');
      }
    }
  }

  if ($variables['paragraph']->hasField('field_private_content')) {
    $private = $variables['paragraph']->get('field_private_content')->getValue();

    if (is_array($private)) {
      $user = \Drupal::currentUser();

      if (!empty(reset($private)['value']) && !$user->hasPermission('view private content')) {
        $variables['private_content'] = TRUE;
      }
    }
  }

  if ($variables['paragraph']->bundle() === 'file' && 'default' === $variables['view_mode'] && isset($variables['content']['field_file'][0])) {
    $variables['document_type'] = file_icon_class($variables['content']['field_file'][0]['#file']->getMimeType());
  }

  if ($variables['paragraph']->bundle() === 'link_to_file') {
    $link = $variables['content']['field_link'][0]['#url']->getUri();
    $parse = parse_url($link);

    if (strpos($parse['host'], 'google') !== FALSE ) {
      $variables['document_type'] = 'google';
    }
    elseif(strpos($parse['host'], 'intellectait') !== FALSE ) {
      $variables['document_type'] = 'onedrive';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_links(array &$variables) {
  if ($variables['theme_hook_original'] === 'links__language_block') {
    // According to the design, we need to change the links of the navigation block
    // to the two characters instead of the language name.
    foreach ($variables['links'] as $key => $language) {
      $variables['links'][$key]['link']['#title'] = substr($language['link']['#title'], 0, 2);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ample_preprocess_field_multiple_value_form(array &$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_organisations':
    case 'field_mobilephone':
    case 'field_telephone':
    case 'field_skype_or_other':
      $variables['table']['#tabledrag'] = [];

      // Unset Order column.
      array_pop($variables['table']['#header']);

      foreach ($variables['table']['#rows'] as $index => $row) {
        array_pop($variables['table']['#rows'][$index]['data']);
      }
      break;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function ample_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu') {
    // Get the current path.
    $current_path = \Drupal::request()->getRequestUri();
    $items = &$variables['items'];

    foreach ($items as $key => $item) {
      // If path is current_path, set active to li.
      if ($item['url']->toString() == $current_path) {
        // Add active link.
        $items[$key]['attributes']['class'] = 'active';
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ample_preprocess_block(&$variables) {
  // Additional process for Custom block type.
  switch ($variables['base_plugin_id']) {
    case 'block_content':
      // In case a BlockContent defined/available.
      if (isset($variables['content']) && isset($variables['content']['#block_content'])) {
        $content = &$variables['content'];
        $block_content = &$content['#block_content'];

        // Designed to invalidate cache on content of block was modified.
        // Add a "block_content:<entity_id>" cache tag.
        $variables['#cache']['tags'] = $block_content->getCacheTags();
      }
      break;
  }
}
